{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/my-favicon.ico","path":"img/my-favicon.ico","modified":0,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/sky.jpg","path":"img/sky.jpg","modified":0,"renderable":0},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1},{"_id":"source/img/支付宝打赏.jpg","path":"img/支付宝打赏.jpg","modified":0,"renderable":0},{"_id":"source/img/微信打赏.jpg","path":"img/微信打赏.jpg","modified":0,"renderable":0},{"_id":"source/img/支付宝打赏.png","path":"img/支付宝打赏.png","modified":0,"renderable":0},{"_id":"source/img/微信打赏.png","path":"img/微信打赏.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1558943193454},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1558943193454},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1558943193454},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1558943193454},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1558943193454},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1558943193454},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1558943193454},{"_id":"themes/melody/_config.yml","hash":"eb1665adc195efe40de156b78a23a660aba72064","modified":1558946993051},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1558943193469},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1558943193485},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558943193469},{"_id":"source/_data/melody.yml","hash":"5b8d533e4e8b03b8f4c9b7b506ddf2fce3be2ebb","modified":1559282080721},{"_id":"source/_posts/first.md","hash":"96e746c31a946683c9a833ae971a9ba52ac93a64","modified":1558942621369},{"_id":"source/_posts/vue学习.md","hash":"0a8ef8a5ccc710ed08aace1137cbe7ca52e9fd09","modified":1559280397713},{"_id":"source/_posts/【JS进阶】你真的掌握变量和类型了吗.md","hash":"18013628362f3b097c3352ee5d40a0df2cd5e91b","modified":1559012428748},{"_id":"source/_posts/一些面试题.md","hash":"0ee3dc1b263a651b08a50e866d9c7c54fa3618de","modified":1558942621370},{"_id":"source/_posts/不同排序算法.md","hash":"e7400349cef9c548de6c1a085dd62cb2c6e87e61","modified":1558942621370},{"_id":"source/_posts/函数防抖和函数节流.md","hash":"5c74a12e48c2d9e3205db4129d5c2585ef6a23bb","modified":1558942621370},{"_id":"source/_posts/如何制作blog.md","hash":"32f563072f886d09af89efb02620b9dccc348a80","modified":1558942621371},{"_id":"source/_posts/微信小程序.md","hash":"30c5bfa8b480dbcb311c3507e55fa0d42056c427","modified":1558942621371},{"_id":"source/_posts/数组的map.md","hash":"55591c79ed416edde4254a9083092b7b8717bc3b","modified":1558942621371},{"_id":"source/_posts/记一次换电脑之后hexo-怎么处理.md","hash":"f50a1e9ede61f7a0b3debeebadb86510cbbdf968","modified":1558947801875},{"_id":"source/img/my-favicon.ico","hash":"1d50fca150de4005641031a233e0dd536f311703","modified":1558942621373},{"_id":"source/tags/index.md","hash":"13546dfa6945fdebc79260a2d1f09e937d118e16","modified":1558942621376},{"_id":"source/categories/index.md","hash":"4e143bf503aca7aca0140d05646e074d184fc2bd","modified":1558942621371},{"_id":"themes/melody/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558943193422},{"_id":"themes/melody/.git/config","hash":"d15ada34b8f38ff379372b129e946457ccfb5653","modified":1558943193438},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558943173606},{"_id":"themes/melody/.git/index","hash":"e4d8aadbd205cf1a05a5400bc1a1a1fe6ef90744","modified":1558947417357},{"_id":"themes/melody/.git/packed-refs","hash":"459375e7bac6477094786a9cc4b1f1f5443826d0","modified":1558943193422},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1558943193454},{"_id":"themes/melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1558943193454},{"_id":"themes/melody/.vscode/settings.json","hash":"46d72f2c9c27996464091654d1687babcd603d24","modified":1558943193454},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1558943193454},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1558943193454},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1558943193454},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1558943193454},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1558943193454},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1558943193454},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1558943193469},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1558943193469},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1558943193469},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1558943193469},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1558943193469},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1558943193469},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1558943193469},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1558943193485},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558943193469},{"_id":"source/img/avatar.jpg","hash":"d1464e054e9043db62415d9fd1056f88a33f303e","modified":1558942621372},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558943173606},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558943173606},{"_id":"themes/melody/.git/hooks/fsmonitor-watchman.sample","hash":"a04bcd7925e722826245dd3085ddbc739ccf12ac","modified":1558943173606},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558943173606},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558943173621},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1558943173621},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558943173621},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558943173621},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558943173621},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558943173621},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558943173621},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558943173621},{"_id":"themes/melody/.git/logs/HEAD","hash":"3dac84239861e6ce1c88d2ec3ac2a8c702b4e796","modified":1558943193438},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1558943193454},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1558943193454},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1558943193454},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1558943193454},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1558943193454},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1558943193454},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1558943193454},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1558943193454},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1558943193454},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1558943193469},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1558943193469},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1558943193469},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1558943193469},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1558943193469},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1558943193469},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1558943193469},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1558943193469},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1558943193469},{"_id":"themes/melody/source/js/scroll.js","hash":"b45eb54e5c6ba67cea5bee365885735ca4e4f4f9","modified":1558943193469},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1558943193485},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1558943193485},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1558943193485},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558943193454},{"_id":"themes/melody/.git/objects/pack/pack-edc061736fbb0525361021209f3ea591a125853c.idx","hash":"65144e78bac78c571c83e8fb2a2aaee16aa4f9fb","modified":1558943193313},{"_id":"themes/melody/.git/refs/heads/master","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1558943193438},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1558943193454},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1558943193454},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1558943193454},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1558943193454},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1558943193454},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1558943193454},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1558943193454},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1558943193454},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1558943193454},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1558943193454},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1558943193454},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1558943193454},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1558943193469},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1558943193469},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1558943193469},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1558943193469},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1558943193469},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1558943193469},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1558943193469},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1558943193469},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1558943193469},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1558943193469},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1558943193469},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1558943193469},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1558943193469},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1558943193469},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1558943193469},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1558943193469},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1558943193469},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1558943193469},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1558943193485},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1558943193485},{"_id":"source/img/sky.jpg","hash":"0c23cd31377f34580345b386dc86f1335c1614bc","modified":1558942621375},{"_id":"themes/melody/.git/logs/refs/heads/master","hash":"3dac84239861e6ce1c88d2ec3ac2a8c702b4e796","modified":1558943193438},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1558943193422},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1558943193485},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1558943193485},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"0ecd5e5b3d2c2723b273dc741c8c695286eb7890","modified":1558943193422},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1558943193485},{"_id":"themes/melody/.git/objects/pack/pack-edc061736fbb0525361021209f3ea591a125853c.pack","hash":"b8a2a790f4f6e2ec647d43db08f8eff14eeeba21","modified":1558943193344},{"_id":"source/img/支付宝打赏.jpg","hash":"d9abe4154269927e12600bc03eede89a9ba4bea3","modified":1559281917666},{"_id":"source/img/微信打赏.jpg","hash":"e0bb3440ab6422e74b04c7856ca886360ad59ee8","modified":1559281917700},{"_id":"source/img/微信打赏.png","hash":"5bf0ce376732392d3a28fda92ff77d47b7471389","modified":1559282146762},{"_id":"source/img/支付宝打赏.png","hash":"ada767e3e07db2f170d64d882c2c3df9f73d389b","modified":1559282072555}],"Category":[{"name":"杂记","_id":"cjwbncfbb00049oqn0cg9e47n"},{"name":"JS","_id":"cjwbncfbg00099oqn81rdd0qg"}],"Data":[{"_id":"melody","data":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"/img/微信打赏.png","text":"喜欢的话支持一下？"}},{"itemlist":{"img":"/img/支付宝打赏.png","text":"喜欢的话支持一下？"}}],"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}],"Page":[{"title":"标签","date":"2018-07-27T02:19:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-07-27 10:19:17\ntype: \"tags\"\n---\n","updated":"2019-05-27T07:37:01.376Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwbncfb600019oqn5reeru42","content":"","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"","more":""},{"title":"分类","date":"2018-07-27T02:20:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-07-27 10:20:19\ntype: \"categories\"\n---\n","updated":"2019-05-27T07:37:01.371Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjwbncfb900039oqnn4gbe0ur","content":"","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"","more":""}],"Post":[{"title":"创建我的博客啦","date":"2018-07-26T08:50:53.000Z","_content":"\n✿✿ヽ(°▽°)ノ✿创建我的新的博客啦~ 诶嘿嘿~\n","source":"_posts/first.md","raw":"---\ntitle: 创建我的博客啦\ndate: 2018-07-26 16:50:53\ntags: 杂记\ncategories: 杂记\n---\n\n✿✿ヽ(°▽°)ノ✿创建我的新的博客啦~ 诶嘿嘿~\n","slug":"first","published":1,"updated":"2019-05-27T07:37:01.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfb100009oqnkliwuzvj","content":"<p>✿✿ヽ(°▽°)ノ✿创建我的新的博客啦~ 诶嘿嘿~</p>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"","more":"<p>✿✿ヽ(°▽°)ノ✿创建我的新的博客啦~ 诶嘿嘿~</p>\n"},{"title":"【JS进阶】你真的掌握变量和类型了吗","date":"2019-05-28T01:29:12.000Z","_content":"\n> 【JS进阶】你真的掌握变量和类型了吗, [参考地址](https://juejin.im/post/5cec1bcff265da1b8f1aa08f)\n\n<!-- more -->\n\n这篇文章记录了变量和类型的一些内容，我觉得内容还挺好的，在这边分享给大家。\n\n## [JavaScript数据类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-1)\n### 原始类型\nNull：只包含一个值：null\nUndefined：只包含一个值：undefined\nBoolean：包含两个值：true 和 false\nNumber：整数或浮点数，还有一些特殊值（-Infinity、+Infinity、NaN）\nString：一串表示文本值的字符序列\nSymbol：一种实例是唯一且不可改变的数据类型\n\n(在es10中加入了第七种原始类型 BigInt，现已被最新 Chrome 支持)\n### 对象类型\n\nObject：除了常用的 Object，Array、Function 等都属于特殊的对象\n\n## [为什么区分原始类型和对象类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-2)\n### 不可变性\n### 引用类型\n### 复制\n### 比较\n### 值传递和引用传递\n\n## [分不清的 Null 和 Undefined](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-8)\n\n## [不太熟的 Symbol 类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-9)\n### Symbol 的特性\n### Symbol 的应用场景\n\n## [不老实的 Number 类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-12)\n### 精度丢失\n### 对结果的分析—更多的问题\n### js 对二进制小数的存储方式\n### IEEE 754\n### js中的toString(2)\n### JavaScript能表示的最大数字\n### 最大安全数字\n\n## [还有哪些引用类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-20)\n### 包装类型\n### 装箱和拆箱\n\n## [类型转换](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-23)\n### 类型转换规则\n### if 语句和逻辑语句\n### 各种运数学算符\n### ==\n### 一道有意思的面试题\n\n## [判断 JavaScript 数据类型的方式](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-29)\n### typeof\n### instanceof\n### toString\n### jquery\n","source":"_posts/【JS进阶】你真的掌握变量和类型了吗.md","raw":"---\ntitle: 【JS进阶】你真的掌握变量和类型了吗\ndate: 2019-05-28 09:29:12\ntags: JS\ncategories: JS\n---\n\n> 【JS进阶】你真的掌握变量和类型了吗, [参考地址](https://juejin.im/post/5cec1bcff265da1b8f1aa08f)\n\n<!-- more -->\n\n这篇文章记录了变量和类型的一些内容，我觉得内容还挺好的，在这边分享给大家。\n\n## [JavaScript数据类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-1)\n### 原始类型\nNull：只包含一个值：null\nUndefined：只包含一个值：undefined\nBoolean：包含两个值：true 和 false\nNumber：整数或浮点数，还有一些特殊值（-Infinity、+Infinity、NaN）\nString：一串表示文本值的字符序列\nSymbol：一种实例是唯一且不可改变的数据类型\n\n(在es10中加入了第七种原始类型 BigInt，现已被最新 Chrome 支持)\n### 对象类型\n\nObject：除了常用的 Object，Array、Function 等都属于特殊的对象\n\n## [为什么区分原始类型和对象类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-2)\n### 不可变性\n### 引用类型\n### 复制\n### 比较\n### 值传递和引用传递\n\n## [分不清的 Null 和 Undefined](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-8)\n\n## [不太熟的 Symbol 类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-9)\n### Symbol 的特性\n### Symbol 的应用场景\n\n## [不老实的 Number 类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-12)\n### 精度丢失\n### 对结果的分析—更多的问题\n### js 对二进制小数的存储方式\n### IEEE 754\n### js中的toString(2)\n### JavaScript能表示的最大数字\n### 最大安全数字\n\n## [还有哪些引用类型](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-20)\n### 包装类型\n### 装箱和拆箱\n\n## [类型转换](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-23)\n### 类型转换规则\n### if 语句和逻辑语句\n### 各种运数学算符\n### ==\n### 一道有意思的面试题\n\n## [判断 JavaScript 数据类型的方式](https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-29)\n### typeof\n### instanceof\n### toString\n### jquery\n","slug":"【JS进阶】你真的掌握变量和类型了吗","published":1,"updated":"2019-05-28T03:00:28.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfb700029oqn7p78xn5z","content":"<blockquote>\n<p>【JS进阶】你真的掌握变量和类型了吗, <a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f\" target=\"_blank\" rel=\"noopener\">参考地址</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>这篇文章记录了变量和类型的一些内容，我觉得内容还挺好的，在这边分享给大家。</p>\n<h2 id=\"JavaScript数据类型\"><a href=\"#JavaScript数据类型\" class=\"headerlink\" title=\"JavaScript数据类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-1\" target=\"_blank\" rel=\"noopener\">JavaScript数据类型</a></h2><h3 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h3><p>Null：只包含一个值：null<br>Undefined：只包含一个值：undefined<br>Boolean：包含两个值：true 和 false<br>Number：整数或浮点数，还有一些特殊值（-Infinity、+Infinity、NaN）<br>String：一串表示文本值的字符序列<br>Symbol：一种实例是唯一且不可改变的数据类型</p>\n<p>(在es10中加入了第七种原始类型 BigInt，现已被最新 Chrome 支持)</p>\n<h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h3><p>Object：除了常用的 Object，Array、Function 等都属于特殊的对象</p>\n<h2 id=\"为什么区分原始类型和对象类型\"><a href=\"#为什么区分原始类型和对象类型\" class=\"headerlink\" title=\"为什么区分原始类型和对象类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-2\" target=\"_blank\" rel=\"noopener\">为什么区分原始类型和对象类型</a></h2><h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><h3 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h3><h2 id=\"分不清的-Null-和-Undefined\"><a href=\"#分不清的-Null-和-Undefined\" class=\"headerlink\" title=\"分不清的 Null 和 Undefined\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-8\" target=\"_blank\" rel=\"noopener\">分不清的 Null 和 Undefined</a></h2><h2 id=\"不太熟的-Symbol-类型\"><a href=\"#不太熟的-Symbol-类型\" class=\"headerlink\" title=\"不太熟的 Symbol 类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-9\" target=\"_blank\" rel=\"noopener\">不太熟的 Symbol 类型</a></h2><h3 id=\"Symbol-的特性\"><a href=\"#Symbol-的特性\" class=\"headerlink\" title=\"Symbol 的特性\"></a>Symbol 的特性</h3><h3 id=\"Symbol-的应用场景\"><a href=\"#Symbol-的应用场景\" class=\"headerlink\" title=\"Symbol 的应用场景\"></a>Symbol 的应用场景</h3><h2 id=\"不老实的-Number-类型\"><a href=\"#不老实的-Number-类型\" class=\"headerlink\" title=\"不老实的 Number 类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-12\" target=\"_blank\" rel=\"noopener\">不老实的 Number 类型</a></h2><h3 id=\"精度丢失\"><a href=\"#精度丢失\" class=\"headerlink\" title=\"精度丢失\"></a>精度丢失</h3><h3 id=\"对结果的分析—更多的问题\"><a href=\"#对结果的分析—更多的问题\" class=\"headerlink\" title=\"对结果的分析—更多的问题\"></a>对结果的分析—更多的问题</h3><h3 id=\"js-对二进制小数的存储方式\"><a href=\"#js-对二进制小数的存储方式\" class=\"headerlink\" title=\"js 对二进制小数的存储方式\"></a>js 对二进制小数的存储方式</h3><h3 id=\"IEEE-754\"><a href=\"#IEEE-754\" class=\"headerlink\" title=\"IEEE 754\"></a>IEEE 754</h3><h3 id=\"js中的toString-2\"><a href=\"#js中的toString-2\" class=\"headerlink\" title=\"js中的toString(2)\"></a>js中的toString(2)</h3><h3 id=\"JavaScript能表示的最大数字\"><a href=\"#JavaScript能表示的最大数字\" class=\"headerlink\" title=\"JavaScript能表示的最大数字\"></a>JavaScript能表示的最大数字</h3><h3 id=\"最大安全数字\"><a href=\"#最大安全数字\" class=\"headerlink\" title=\"最大安全数字\"></a>最大安全数字</h3><h2 id=\"还有哪些引用类型\"><a href=\"#还有哪些引用类型\" class=\"headerlink\" title=\"还有哪些引用类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-20\" target=\"_blank\" rel=\"noopener\">还有哪些引用类型</a></h2><h3 id=\"包装类型\"><a href=\"#包装类型\" class=\"headerlink\" title=\"包装类型\"></a>包装类型</h3><h3 id=\"装箱和拆箱\"><a href=\"#装箱和拆箱\" class=\"headerlink\" title=\"装箱和拆箱\"></a>装箱和拆箱</h3><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-23\" target=\"_blank\" rel=\"noopener\">类型转换</a></h2><h3 id=\"类型转换规则\"><a href=\"#类型转换规则\" class=\"headerlink\" title=\"类型转换规则\"></a>类型转换规则</h3><h3 id=\"if-语句和逻辑语句\"><a href=\"#if-语句和逻辑语句\" class=\"headerlink\" title=\"if 语句和逻辑语句\"></a>if 语句和逻辑语句</h3><h3 id=\"各种运数学算符\"><a href=\"#各种运数学算符\" class=\"headerlink\" title=\"各种运数学算符\"></a>各种运数学算符</h3><h3 id><a href=\"#\" class=\"headerlink\" title=\"==\"></a>==</h3><h3 id=\"一道有意思的面试题\"><a href=\"#一道有意思的面试题\" class=\"headerlink\" title=\"一道有意思的面试题\"></a>一道有意思的面试题</h3><h2 id=\"判断-JavaScript-数据类型的方式\"><a href=\"#判断-JavaScript-数据类型的方式\" class=\"headerlink\" title=\"判断 JavaScript 数据类型的方式\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-29\" target=\"_blank\" rel=\"noopener\">判断 JavaScript 数据类型的方式</a></h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><h3 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h3>","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>【JS进阶】你真的掌握变量和类型了吗, <a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f\" target=\"_blank\" rel=\"noopener\">参考地址</a></p>\n</blockquote>","more":"<p>这篇文章记录了变量和类型的一些内容，我觉得内容还挺好的，在这边分享给大家。</p>\n<h2 id=\"JavaScript数据类型\"><a href=\"#JavaScript数据类型\" class=\"headerlink\" title=\"JavaScript数据类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-1\" target=\"_blank\" rel=\"noopener\">JavaScript数据类型</a></h2><h3 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h3><p>Null：只包含一个值：null<br>Undefined：只包含一个值：undefined<br>Boolean：包含两个值：true 和 false<br>Number：整数或浮点数，还有一些特殊值（-Infinity、+Infinity、NaN）<br>String：一串表示文本值的字符序列<br>Symbol：一种实例是唯一且不可改变的数据类型</p>\n<p>(在es10中加入了第七种原始类型 BigInt，现已被最新 Chrome 支持)</p>\n<h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h3><p>Object：除了常用的 Object，Array、Function 等都属于特殊的对象</p>\n<h2 id=\"为什么区分原始类型和对象类型\"><a href=\"#为什么区分原始类型和对象类型\" class=\"headerlink\" title=\"为什么区分原始类型和对象类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-2\" target=\"_blank\" rel=\"noopener\">为什么区分原始类型和对象类型</a></h2><h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><h3 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h3><h2 id=\"分不清的-Null-和-Undefined\"><a href=\"#分不清的-Null-和-Undefined\" class=\"headerlink\" title=\"分不清的 Null 和 Undefined\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-8\" target=\"_blank\" rel=\"noopener\">分不清的 Null 和 Undefined</a></h2><h2 id=\"不太熟的-Symbol-类型\"><a href=\"#不太熟的-Symbol-类型\" class=\"headerlink\" title=\"不太熟的 Symbol 类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-9\" target=\"_blank\" rel=\"noopener\">不太熟的 Symbol 类型</a></h2><h3 id=\"Symbol-的特性\"><a href=\"#Symbol-的特性\" class=\"headerlink\" title=\"Symbol 的特性\"></a>Symbol 的特性</h3><h3 id=\"Symbol-的应用场景\"><a href=\"#Symbol-的应用场景\" class=\"headerlink\" title=\"Symbol 的应用场景\"></a>Symbol 的应用场景</h3><h2 id=\"不老实的-Number-类型\"><a href=\"#不老实的-Number-类型\" class=\"headerlink\" title=\"不老实的 Number 类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-12\" target=\"_blank\" rel=\"noopener\">不老实的 Number 类型</a></h2><h3 id=\"精度丢失\"><a href=\"#精度丢失\" class=\"headerlink\" title=\"精度丢失\"></a>精度丢失</h3><h3 id=\"对结果的分析—更多的问题\"><a href=\"#对结果的分析—更多的问题\" class=\"headerlink\" title=\"对结果的分析—更多的问题\"></a>对结果的分析—更多的问题</h3><h3 id=\"js-对二进制小数的存储方式\"><a href=\"#js-对二进制小数的存储方式\" class=\"headerlink\" title=\"js 对二进制小数的存储方式\"></a>js 对二进制小数的存储方式</h3><h3 id=\"IEEE-754\"><a href=\"#IEEE-754\" class=\"headerlink\" title=\"IEEE 754\"></a>IEEE 754</h3><h3 id=\"js中的toString-2\"><a href=\"#js中的toString-2\" class=\"headerlink\" title=\"js中的toString(2)\"></a>js中的toString(2)</h3><h3 id=\"JavaScript能表示的最大数字\"><a href=\"#JavaScript能表示的最大数字\" class=\"headerlink\" title=\"JavaScript能表示的最大数字\"></a>JavaScript能表示的最大数字</h3><h3 id=\"最大安全数字\"><a href=\"#最大安全数字\" class=\"headerlink\" title=\"最大安全数字\"></a>最大安全数字</h3><h2 id=\"还有哪些引用类型\"><a href=\"#还有哪些引用类型\" class=\"headerlink\" title=\"还有哪些引用类型\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-20\" target=\"_blank\" rel=\"noopener\">还有哪些引用类型</a></h2><h3 id=\"包装类型\"><a href=\"#包装类型\" class=\"headerlink\" title=\"包装类型\"></a>包装类型</h3><h3 id=\"装箱和拆箱\"><a href=\"#装箱和拆箱\" class=\"headerlink\" title=\"装箱和拆箱\"></a>装箱和拆箱</h3><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-23\" target=\"_blank\" rel=\"noopener\">类型转换</a></h2><h3 id=\"类型转换规则\"><a href=\"#类型转换规则\" class=\"headerlink\" title=\"类型转换规则\"></a>类型转换规则</h3><h3 id=\"if-语句和逻辑语句\"><a href=\"#if-语句和逻辑语句\" class=\"headerlink\" title=\"if 语句和逻辑语句\"></a>if 语句和逻辑语句</h3><h3 id=\"各种运数学算符\"><a href=\"#各种运数学算符\" class=\"headerlink\" title=\"各种运数学算符\"></a>各种运数学算符</h3><h3 id><a href=\"#\" class=\"headerlink\" title=\"==\"></a>==</h3><h3 id=\"一道有意思的面试题\"><a href=\"#一道有意思的面试题\" class=\"headerlink\" title=\"一道有意思的面试题\"></a>一道有意思的面试题</h3><h2 id=\"判断-JavaScript-数据类型的方式\"><a href=\"#判断-JavaScript-数据类型的方式\" class=\"headerlink\" title=\"判断 JavaScript 数据类型的方式\"></a><a href=\"https://juejin.im/post/5cec1bcff265da1b8f1aa08f#heading-29\" target=\"_blank\" rel=\"noopener\">判断 JavaScript 数据类型的方式</a></h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h3><h3 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h3>"},{"title":"一些面试题","date":"2018-08-14T06:33:06.000Z","_content":"> 学而不思则罔，思而不学则殆。这一篇会将一些看到的面试题做一个总结。以后看到新的面试题也会持续的更新在这个里面。\n\n<!-- more -->\n\n## HTML 和 CSS 面试题\n### 盒子模型\n   CSS 中盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。 \n   W3C 盒子模型： width = content （box-sizing: content-box）\n   IE 盒子模型中： width = content + padding + border （box-sizing: border-box）\n\n### 块元素和行内元素\n   \n| 块元素 | 行内元素 |\n| ------ | ------ |\n| 块元素会独占一行，默认情况下，其宽度会自动填满父元素宽度，即使设置了宽度也会独占一行 | 行内元素不会独占一行，没有宽度和和高度属性。 |\n| 块级元素：div p form ul li h1-h6 | 行内元素：span img input a i |\n\n### CSS 选择器分类\n基本选择器：\n* id选择器：id = name\n* 类选择器：class = \"name\"\n* 标签选择器：body, div, ul\n* 全局选择器：* \n\n复杂选择器：\n* 组合选择器：.head .head_logo\n* 后代选择器：ul li 从父集到子集\n* 群组选择器：div span {color: red} 具有相同样式的标签分组显示\n* 继承选择器：\n* 为类选择器：链接样式 a:hover\n* 子选择器：div > p \n* css 相邻兄弟选择器： h1 + p\n\n优先级：\n* 属性后面加 !import 会覆盖页面内任何位置定义的元素样式\n* 作为 style 属性写在元素内的样式\n* id 选择器\n* 类选择器\n* 标签选择器\n* 通配符选择器（*）\n* 浏览器自定义或继承\n\n### 为什么 CSS 放在顶部而 JS 写在后面\n* 浏览器预先加载 CSS 后，可以不必等待 HTML 加载完毕就可以渲染页面了。\n* HTML 渲染并不会等到完全加载完在渲染页面，而是一边解析 DOM 一边渲染。\n* JS 写在尾部，主要是因为 JS主要扮演事件处理的功能，一方面很多操作是在页面渲染后才执行的。另一方面，可以节省加载时间，是页面能够更好的加载，提高用户的良好体验。\n\n## JS 面试题\n### setTimeout和setInterval的机制\n因为js是单线程的。浏览器遇到etTimeout和setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码。\n\n### 一些检验方法\n千万不要使用typeof来判断对象和数组，因为这种类型都会返回object。\n\n* typeOf()是判断基本类型的Boolean,Number，symbol, undefined, String。 对于引用类型：除function，都返回object null返回object。\n* installOf() 用来判断A是否是B的实例，installof检查的是原型。\n* toString() 是Object的原型方法，对于 Object 对象，直接调用 toString() 就能返回 [Object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\n* hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性。\n* isProperty()方法测试一个对象是否存在另一个对象的原型链上。\n* valueof：所有对象都有valueof，如果存在任意原始值，他就默认将对象转化为表示它的原始值。如果对象是复合值，而却大部分对象无法真正表示一个原始值，因此默认的valueof()方法简单的返回对象本身，而不是返回原始值。\n\n### GET 和 POST 的区别，什么时候使用 POST ？\n#### GET 和 POST 的区别如下：\n\n* GET：一般用于查询数据，使用 URL 传递参数，由于浏览器对地址栏长度有限制，所以使用 GET 方式所发送信息的数量有限制，同时浏览器记录（历史记录，缓存）会保留请求地址的信息，包括地址后面的数据。GET 只能发送普通格式（URL 编码格式）的数据。\n* POST：一般用于向服务器发送数据，对所发送的数据的大小理论上是没有限制，浏览器会缓存记录地址，但不会记录 POST 提交的数据。POST 可以发送纯文本、URL 编码格式、二进制格式的字符串，形式多样。\n\n#### 以下情况中，请使用 POST：\n* 以提交为目的的请求（类似语义化，get 表示请求，post 表示提交）；\n* 发送私密类数据（用户名、密码）（因为浏览器缓存记录特性）；\n* 向服务器发送大量数据（数据大小限制区别）；\n* 上传文件图片时（数据类型区别）\n\n### AJAX 的局限性\n* AJAX 不支持浏览器 back 按钮。\n* 安全问题 AJAX 暴露了与服务器交互的细节。\n* 对搜索引擎的支持比较弱。不会执行你的 JS 脚本，只会操作你的网页源代码；\n* 跨域请求有一定限制。解决方式：jsonp；\n\n## 框架\n### MVVM （Model-View-ViewModel）优点：\n* 低耦合：视图(View)可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n* 可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n* 独立开发：开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。\n* 可测试：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。","source":"_posts/一些面试题.md","raw":"---\ntitle: 一些面试题\ndate: 2018-08-14 14:33:06\ntags: JS\ncategories: JS\n---\n> 学而不思则罔，思而不学则殆。这一篇会将一些看到的面试题做一个总结。以后看到新的面试题也会持续的更新在这个里面。\n\n<!-- more -->\n\n## HTML 和 CSS 面试题\n### 盒子模型\n   CSS 中盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。 \n   W3C 盒子模型： width = content （box-sizing: content-box）\n   IE 盒子模型中： width = content + padding + border （box-sizing: border-box）\n\n### 块元素和行内元素\n   \n| 块元素 | 行内元素 |\n| ------ | ------ |\n| 块元素会独占一行，默认情况下，其宽度会自动填满父元素宽度，即使设置了宽度也会独占一行 | 行内元素不会独占一行，没有宽度和和高度属性。 |\n| 块级元素：div p form ul li h1-h6 | 行内元素：span img input a i |\n\n### CSS 选择器分类\n基本选择器：\n* id选择器：id = name\n* 类选择器：class = \"name\"\n* 标签选择器：body, div, ul\n* 全局选择器：* \n\n复杂选择器：\n* 组合选择器：.head .head_logo\n* 后代选择器：ul li 从父集到子集\n* 群组选择器：div span {color: red} 具有相同样式的标签分组显示\n* 继承选择器：\n* 为类选择器：链接样式 a:hover\n* 子选择器：div > p \n* css 相邻兄弟选择器： h1 + p\n\n优先级：\n* 属性后面加 !import 会覆盖页面内任何位置定义的元素样式\n* 作为 style 属性写在元素内的样式\n* id 选择器\n* 类选择器\n* 标签选择器\n* 通配符选择器（*）\n* 浏览器自定义或继承\n\n### 为什么 CSS 放在顶部而 JS 写在后面\n* 浏览器预先加载 CSS 后，可以不必等待 HTML 加载完毕就可以渲染页面了。\n* HTML 渲染并不会等到完全加载完在渲染页面，而是一边解析 DOM 一边渲染。\n* JS 写在尾部，主要是因为 JS主要扮演事件处理的功能，一方面很多操作是在页面渲染后才执行的。另一方面，可以节省加载时间，是页面能够更好的加载，提高用户的良好体验。\n\n## JS 面试题\n### setTimeout和setInterval的机制\n因为js是单线程的。浏览器遇到etTimeout和setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码。\n\n### 一些检验方法\n千万不要使用typeof来判断对象和数组，因为这种类型都会返回object。\n\n* typeOf()是判断基本类型的Boolean,Number，symbol, undefined, String。 对于引用类型：除function，都返回object null返回object。\n* installOf() 用来判断A是否是B的实例，installof检查的是原型。\n* toString() 是Object的原型方法，对于 Object 对象，直接调用 toString() 就能返回 [Object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\n* hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性。\n* isProperty()方法测试一个对象是否存在另一个对象的原型链上。\n* valueof：所有对象都有valueof，如果存在任意原始值，他就默认将对象转化为表示它的原始值。如果对象是复合值，而却大部分对象无法真正表示一个原始值，因此默认的valueof()方法简单的返回对象本身，而不是返回原始值。\n\n### GET 和 POST 的区别，什么时候使用 POST ？\n#### GET 和 POST 的区别如下：\n\n* GET：一般用于查询数据，使用 URL 传递参数，由于浏览器对地址栏长度有限制，所以使用 GET 方式所发送信息的数量有限制，同时浏览器记录（历史记录，缓存）会保留请求地址的信息，包括地址后面的数据。GET 只能发送普通格式（URL 编码格式）的数据。\n* POST：一般用于向服务器发送数据，对所发送的数据的大小理论上是没有限制，浏览器会缓存记录地址，但不会记录 POST 提交的数据。POST 可以发送纯文本、URL 编码格式、二进制格式的字符串，形式多样。\n\n#### 以下情况中，请使用 POST：\n* 以提交为目的的请求（类似语义化，get 表示请求，post 表示提交）；\n* 发送私密类数据（用户名、密码）（因为浏览器缓存记录特性）；\n* 向服务器发送大量数据（数据大小限制区别）；\n* 上传文件图片时（数据类型区别）\n\n### AJAX 的局限性\n* AJAX 不支持浏览器 back 按钮。\n* 安全问题 AJAX 暴露了与服务器交互的细节。\n* 对搜索引擎的支持比较弱。不会执行你的 JS 脚本，只会操作你的网页源代码；\n* 跨域请求有一定限制。解决方式：jsonp；\n\n## 框架\n### MVVM （Model-View-ViewModel）优点：\n* 低耦合：视图(View)可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。\n* 可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。\n* 独立开发：开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。\n* 可测试：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。","slug":"一些面试题","published":1,"updated":"2019-05-27T07:37:01.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbd00069oqnp9kwf9wh","content":"<blockquote>\n<p>学而不思则罔，思而不学则殆。这一篇会将一些看到的面试题做一个总结。以后看到新的面试题也会持续的更新在这个里面。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"HTML-和-CSS-面试题\"><a href=\"#HTML-和-CSS-面试题\" class=\"headerlink\" title=\"HTML 和 CSS 面试题\"></a>HTML 和 CSS 面试题</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>   CSS 中盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br>   W3C 盒子模型： width = content （box-sizing: content-box）<br>   IE 盒子模型中： width = content + padding + border （box-sizing: border-box）</p>\n<h3 id=\"块元素和行内元素\"><a href=\"#块元素和行内元素\" class=\"headerlink\" title=\"块元素和行内元素\"></a>块元素和行内元素</h3><table>\n<thead>\n<tr>\n<th>块元素</th>\n<th>行内元素</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块元素会独占一行，默认情况下，其宽度会自动填满父元素宽度，即使设置了宽度也会独占一行</td>\n<td>行内元素不会独占一行，没有宽度和和高度属性。</td>\n</tr>\n<tr>\n<td>块级元素：div p form ul li h1-h6</td>\n<td>行内元素：span img input a i</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"CSS-选择器分类\"><a href=\"#CSS-选择器分类\" class=\"headerlink\" title=\"CSS 选择器分类\"></a>CSS 选择器分类</h3><p>基本选择器：</p>\n<ul>\n<li>id选择器：id = name</li>\n<li>类选择器：class = “name”</li>\n<li>标签选择器：body, div, ul</li>\n<li>全局选择器：* </li>\n</ul>\n<p>复杂选择器：</p>\n<ul>\n<li>组合选择器：.head .head_logo</li>\n<li>后代选择器：ul li 从父集到子集</li>\n<li>群组选择器：div span {color: red} 具有相同样式的标签分组显示</li>\n<li>继承选择器：</li>\n<li>为类选择器：链接样式 a:hover</li>\n<li>子选择器：div &gt; p </li>\n<li>css 相邻兄弟选择器： h1 + p</li>\n</ul>\n<p>优先级：</p>\n<ul>\n<li>属性后面加 !import 会覆盖页面内任何位置定义的元素样式</li>\n<li>作为 style 属性写在元素内的样式</li>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器（*）</li>\n<li>浏览器自定义或继承</li>\n</ul>\n<h3 id=\"为什么-CSS-放在顶部而-JS-写在后面\"><a href=\"#为什么-CSS-放在顶部而-JS-写在后面\" class=\"headerlink\" title=\"为什么 CSS 放在顶部而 JS 写在后面\"></a>为什么 CSS 放在顶部而 JS 写在后面</h3><ul>\n<li>浏览器预先加载 CSS 后，可以不必等待 HTML 加载完毕就可以渲染页面了。</li>\n<li>HTML 渲染并不会等到完全加载完在渲染页面，而是一边解析 DOM 一边渲染。</li>\n<li>JS 写在尾部，主要是因为 JS主要扮演事件处理的功能，一方面很多操作是在页面渲染后才执行的。另一方面，可以节省加载时间，是页面能够更好的加载，提高用户的良好体验。</li>\n</ul>\n<h2 id=\"JS-面试题\"><a href=\"#JS-面试题\" class=\"headerlink\" title=\"JS 面试题\"></a>JS 面试题</h2><h3 id=\"setTimeout和setInterval的机制\"><a href=\"#setTimeout和setInterval的机制\" class=\"headerlink\" title=\"setTimeout和setInterval的机制\"></a>setTimeout和setInterval的机制</h3><p>因为js是单线程的。浏览器遇到etTimeout和setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码。</p>\n<h3 id=\"一些检验方法\"><a href=\"#一些检验方法\" class=\"headerlink\" title=\"一些检验方法\"></a>一些检验方法</h3><p>千万不要使用typeof来判断对象和数组，因为这种类型都会返回object。</p>\n<ul>\n<li>typeOf()是判断基本类型的Boolean,Number，symbol, undefined, String。 对于引用类型：除function，都返回object null返回object。</li>\n<li>installOf() 用来判断A是否是B的实例，installof检查的是原型。</li>\n<li>toString() 是Object的原型方法，对于 Object 对象，直接调用 toString() 就能返回 [Object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</li>\n<li>hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性。</li>\n<li>isProperty()方法测试一个对象是否存在另一个对象的原型链上。</li>\n<li>valueof：所有对象都有valueof，如果存在任意原始值，他就默认将对象转化为表示它的原始值。如果对象是复合值，而却大部分对象无法真正表示一个原始值，因此默认的valueof()方法简单的返回对象本身，而不是返回原始值。</li>\n</ul>\n<h3 id=\"GET-和-POST-的区别，什么时候使用-POST-？\"><a href=\"#GET-和-POST-的区别，什么时候使用-POST-？\" class=\"headerlink\" title=\"GET 和 POST 的区别，什么时候使用 POST ？\"></a>GET 和 POST 的区别，什么时候使用 POST ？</h3><h4 id=\"GET-和-POST-的区别如下：\"><a href=\"#GET-和-POST-的区别如下：\" class=\"headerlink\" title=\"GET 和 POST 的区别如下：\"></a>GET 和 POST 的区别如下：</h4><ul>\n<li>GET：一般用于查询数据，使用 URL 传递参数，由于浏览器对地址栏长度有限制，所以使用 GET 方式所发送信息的数量有限制，同时浏览器记录（历史记录，缓存）会保留请求地址的信息，包括地址后面的数据。GET 只能发送普通格式（URL 编码格式）的数据。</li>\n<li>POST：一般用于向服务器发送数据，对所发送的数据的大小理论上是没有限制，浏览器会缓存记录地址，但不会记录 POST 提交的数据。POST 可以发送纯文本、URL 编码格式、二进制格式的字符串，形式多样。</li>\n</ul>\n<h4 id=\"以下情况中，请使用-POST：\"><a href=\"#以下情况中，请使用-POST：\" class=\"headerlink\" title=\"以下情况中，请使用 POST：\"></a>以下情况中，请使用 POST：</h4><ul>\n<li>以提交为目的的请求（类似语义化，get 表示请求，post 表示提交）；</li>\n<li>发送私密类数据（用户名、密码）（因为浏览器缓存记录特性）；</li>\n<li>向服务器发送大量数据（数据大小限制区别）；</li>\n<li>上传文件图片时（数据类型区别）</li>\n</ul>\n<h3 id=\"AJAX-的局限性\"><a href=\"#AJAX-的局限性\" class=\"headerlink\" title=\"AJAX 的局限性\"></a>AJAX 的局限性</h3><ul>\n<li>AJAX 不支持浏览器 back 按钮。</li>\n<li>安全问题 AJAX 暴露了与服务器交互的细节。</li>\n<li>对搜索引擎的支持比较弱。不会执行你的 JS 脚本，只会操作你的网页源代码；</li>\n<li>跨域请求有一定限制。解决方式：jsonp；</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"MVVM-（Model-View-ViewModel）优点：\"><a href=\"#MVVM-（Model-View-ViewModel）优点：\" class=\"headerlink\" title=\"MVVM （Model-View-ViewModel）优点：\"></a>MVVM （Model-View-ViewModel）优点：</h3><ul>\n<li>低耦合：视图(View)可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发：开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。</li>\n<li>可测试：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</li>\n</ul>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>学而不思则罔，思而不学则殆。这一篇会将一些看到的面试题做一个总结。以后看到新的面试题也会持续的更新在这个里面。</p>\n</blockquote>","more":"<h2 id=\"HTML-和-CSS-面试题\"><a href=\"#HTML-和-CSS-面试题\" class=\"headerlink\" title=\"HTML 和 CSS 面试题\"></a>HTML 和 CSS 面试题</h2><h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><p>   CSS 中盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br>   W3C 盒子模型： width = content （box-sizing: content-box）<br>   IE 盒子模型中： width = content + padding + border （box-sizing: border-box）</p>\n<h3 id=\"块元素和行内元素\"><a href=\"#块元素和行内元素\" class=\"headerlink\" title=\"块元素和行内元素\"></a>块元素和行内元素</h3><table>\n<thead>\n<tr>\n<th>块元素</th>\n<th>行内元素</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块元素会独占一行，默认情况下，其宽度会自动填满父元素宽度，即使设置了宽度也会独占一行</td>\n<td>行内元素不会独占一行，没有宽度和和高度属性。</td>\n</tr>\n<tr>\n<td>块级元素：div p form ul li h1-h6</td>\n<td>行内元素：span img input a i</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"CSS-选择器分类\"><a href=\"#CSS-选择器分类\" class=\"headerlink\" title=\"CSS 选择器分类\"></a>CSS 选择器分类</h3><p>基本选择器：</p>\n<ul>\n<li>id选择器：id = name</li>\n<li>类选择器：class = “name”</li>\n<li>标签选择器：body, div, ul</li>\n<li>全局选择器：* </li>\n</ul>\n<p>复杂选择器：</p>\n<ul>\n<li>组合选择器：.head .head_logo</li>\n<li>后代选择器：ul li 从父集到子集</li>\n<li>群组选择器：div span {color: red} 具有相同样式的标签分组显示</li>\n<li>继承选择器：</li>\n<li>为类选择器：链接样式 a:hover</li>\n<li>子选择器：div &gt; p </li>\n<li>css 相邻兄弟选择器： h1 + p</li>\n</ul>\n<p>优先级：</p>\n<ul>\n<li>属性后面加 !import 会覆盖页面内任何位置定义的元素样式</li>\n<li>作为 style 属性写在元素内的样式</li>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器（*）</li>\n<li>浏览器自定义或继承</li>\n</ul>\n<h3 id=\"为什么-CSS-放在顶部而-JS-写在后面\"><a href=\"#为什么-CSS-放在顶部而-JS-写在后面\" class=\"headerlink\" title=\"为什么 CSS 放在顶部而 JS 写在后面\"></a>为什么 CSS 放在顶部而 JS 写在后面</h3><ul>\n<li>浏览器预先加载 CSS 后，可以不必等待 HTML 加载完毕就可以渲染页面了。</li>\n<li>HTML 渲染并不会等到完全加载完在渲染页面，而是一边解析 DOM 一边渲染。</li>\n<li>JS 写在尾部，主要是因为 JS主要扮演事件处理的功能，一方面很多操作是在页面渲染后才执行的。另一方面，可以节省加载时间，是页面能够更好的加载，提高用户的良好体验。</li>\n</ul>\n<h2 id=\"JS-面试题\"><a href=\"#JS-面试题\" class=\"headerlink\" title=\"JS 面试题\"></a>JS 面试题</h2><h3 id=\"setTimeout和setInterval的机制\"><a href=\"#setTimeout和setInterval的机制\" class=\"headerlink\" title=\"setTimeout和setInterval的机制\"></a>setTimeout和setInterval的机制</h3><p>因为js是单线程的。浏览器遇到etTimeout和setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码。</p>\n<h3 id=\"一些检验方法\"><a href=\"#一些检验方法\" class=\"headerlink\" title=\"一些检验方法\"></a>一些检验方法</h3><p>千万不要使用typeof来判断对象和数组，因为这种类型都会返回object。</p>\n<ul>\n<li>typeOf()是判断基本类型的Boolean,Number，symbol, undefined, String。 对于引用类型：除function，都返回object null返回object。</li>\n<li>installOf() 用来判断A是否是B的实例，installof检查的是原型。</li>\n<li>toString() 是Object的原型方法，对于 Object 对象，直接调用 toString() 就能返回 [Object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</li>\n<li>hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性。</li>\n<li>isProperty()方法测试一个对象是否存在另一个对象的原型链上。</li>\n<li>valueof：所有对象都有valueof，如果存在任意原始值，他就默认将对象转化为表示它的原始值。如果对象是复合值，而却大部分对象无法真正表示一个原始值，因此默认的valueof()方法简单的返回对象本身，而不是返回原始值。</li>\n</ul>\n<h3 id=\"GET-和-POST-的区别，什么时候使用-POST-？\"><a href=\"#GET-和-POST-的区别，什么时候使用-POST-？\" class=\"headerlink\" title=\"GET 和 POST 的区别，什么时候使用 POST ？\"></a>GET 和 POST 的区别，什么时候使用 POST ？</h3><h4 id=\"GET-和-POST-的区别如下：\"><a href=\"#GET-和-POST-的区别如下：\" class=\"headerlink\" title=\"GET 和 POST 的区别如下：\"></a>GET 和 POST 的区别如下：</h4><ul>\n<li>GET：一般用于查询数据，使用 URL 传递参数，由于浏览器对地址栏长度有限制，所以使用 GET 方式所发送信息的数量有限制，同时浏览器记录（历史记录，缓存）会保留请求地址的信息，包括地址后面的数据。GET 只能发送普通格式（URL 编码格式）的数据。</li>\n<li>POST：一般用于向服务器发送数据，对所发送的数据的大小理论上是没有限制，浏览器会缓存记录地址，但不会记录 POST 提交的数据。POST 可以发送纯文本、URL 编码格式、二进制格式的字符串，形式多样。</li>\n</ul>\n<h4 id=\"以下情况中，请使用-POST：\"><a href=\"#以下情况中，请使用-POST：\" class=\"headerlink\" title=\"以下情况中，请使用 POST：\"></a>以下情况中，请使用 POST：</h4><ul>\n<li>以提交为目的的请求（类似语义化，get 表示请求，post 表示提交）；</li>\n<li>发送私密类数据（用户名、密码）（因为浏览器缓存记录特性）；</li>\n<li>向服务器发送大量数据（数据大小限制区别）；</li>\n<li>上传文件图片时（数据类型区别）</li>\n</ul>\n<h3 id=\"AJAX-的局限性\"><a href=\"#AJAX-的局限性\" class=\"headerlink\" title=\"AJAX 的局限性\"></a>AJAX 的局限性</h3><ul>\n<li>AJAX 不支持浏览器 back 按钮。</li>\n<li>安全问题 AJAX 暴露了与服务器交互的细节。</li>\n<li>对搜索引擎的支持比较弱。不会执行你的 JS 脚本，只会操作你的网页源代码；</li>\n<li>跨域请求有一定限制。解决方式：jsonp；</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><h3 id=\"MVVM-（Model-View-ViewModel）优点：\"><a href=\"#MVVM-（Model-View-ViewModel）优点：\" class=\"headerlink\" title=\"MVVM （Model-View-ViewModel）优点：\"></a>MVVM （Model-View-ViewModel）优点：</h3><ul>\n<li>低耦合：视图(View)可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>\n<li>可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</li>\n<li>独立开发：开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。</li>\n<li>可测试：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</li>\n</ul>"},{"title":"不同排序算法","date":"2019-02-20T05:40:06.000Z","_content":"\n> 记录各种不同的排序算法\n\n<!-- more -->\n\n```\nconst arr = [44, 92, 82, 48, 2, 51];\n\n/********* 1、冒泡排序 **********/\n// 很常见很容易理解的排序算法， 排序思路：遍历数组，每次遍历就将最大（或最小）值推至最前。越往后遍历查询次数越少\nconst bubbleSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[j - 1]) {\n        const tmp = list[j - 1];\n        list[j - 1] = list[j];\n        list[j] = tmp;\n      }\n    }\n  }\n  return list;\n}\n\n/********* 2、改进版冒泡排序 **********/\n// 对上述冒泡排序的一种优化， 优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序。\nconst bubbleSort2 = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    let exchange = false;\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[j - 1]) {\n        const tmp = list[j - 1];\n        list[j - 1] = list[j];\n        list[j] = tmp;\n        exchange = true;\n      }\n    }\n    if (!exchange) return list\n  }\n  return list;\n}\n\n/********* 3、选择排序 **********/\n// 在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。\nconst selectionSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    let k = i\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[k]) k = j;\n    }\n    if (k !== i) {\n      const tmp = list[k];\n      list[k] = list[i];\n      list[i] = tmp;\n    }\n  }\n  return list;\n}\n\n/********* 4、插入排序 **********/\n// 最普通的排序算法， 从数组下标1开始每增1项排序一次，越往后遍历次数越多；\nconst insertSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 1; i < len; i++) {\n    const tmp = list[i];\n    let j = i - 1;\n    while (j >= 0 && tmp < list[j]) {\n      list[j + 1] = list[j];\n      j--;\n    }\n    list[j + 1] = tmp;\n  }\n  return list;\n}\n\n/********* 5、快速排序 **********/\nfunction quickSort(arr) {\n  const list = arr.slice(); //为了保证这个函数是纯函数，拷贝一次数组\n  if (list.length <= 1) return list;\n  const pivot = list.splice(0, 1)[0]; //选第一个作为基数\n  const left = [];\n  const right = [];\n  for (let i = 0, len = list.length; i < len; i++) {\n    if (list[i] < pivot) {\n      left.push(list[i]);\n    } else {\n      right.push(list[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\n\n```","source":"_posts/不同排序算法.md","raw":"---\ntitle: 不同排序算法\ndate: 2019-02-20 13:40:06\ntags: JS\ncategories: JS\n---\n\n> 记录各种不同的排序算法\n\n<!-- more -->\n\n```\nconst arr = [44, 92, 82, 48, 2, 51];\n\n/********* 1、冒泡排序 **********/\n// 很常见很容易理解的排序算法， 排序思路：遍历数组，每次遍历就将最大（或最小）值推至最前。越往后遍历查询次数越少\nconst bubbleSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[j - 1]) {\n        const tmp = list[j - 1];\n        list[j - 1] = list[j];\n        list[j] = tmp;\n      }\n    }\n  }\n  return list;\n}\n\n/********* 2、改进版冒泡排序 **********/\n// 对上述冒泡排序的一种优化， 优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序。\nconst bubbleSort2 = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    let exchange = false;\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[j - 1]) {\n        const tmp = list[j - 1];\n        list[j - 1] = list[j];\n        list[j] = tmp;\n        exchange = true;\n      }\n    }\n    if (!exchange) return list\n  }\n  return list;\n}\n\n/********* 3、选择排序 **********/\n// 在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。\nconst selectionSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 0; i < len; i++) {\n    let k = i\n    for (let j = len - 1; j > i; j--) {\n      if (list[j] < list[k]) k = j;\n    }\n    if (k !== i) {\n      const tmp = list[k];\n      list[k] = list[i];\n      list[i] = tmp;\n    }\n  }\n  return list;\n}\n\n/********* 4、插入排序 **********/\n// 最普通的排序算法， 从数组下标1开始每增1项排序一次，越往后遍历次数越多；\nconst insertSort = arr => {\n  const list = arr.slice(); //保证函数为纯函数\n  const len = list.length;\n  for (let i = 1; i < len; i++) {\n    const tmp = list[i];\n    let j = i - 1;\n    while (j >= 0 && tmp < list[j]) {\n      list[j + 1] = list[j];\n      j--;\n    }\n    list[j + 1] = tmp;\n  }\n  return list;\n}\n\n/********* 5、快速排序 **********/\nfunction quickSort(arr) {\n  const list = arr.slice(); //为了保证这个函数是纯函数，拷贝一次数组\n  if (list.length <= 1) return list;\n  const pivot = list.splice(0, 1)[0]; //选第一个作为基数\n  const left = [];\n  const right = [];\n  for (let i = 0, len = list.length; i < len; i++) {\n    if (list[i] < pivot) {\n      left.push(list[i]);\n    } else {\n      right.push(list[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right))\n}\n\n```","slug":"不同排序算法","published":1,"updated":"2019-05-27T07:37:01.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbe00079oqndout3dyd","content":"<blockquote>\n<p>记录各种不同的排序算法</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [44, 92, 82, 48, 2, 51];</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 1、冒泡排序 **********/</span><br><span class=\"line\">// 很常见很容易理解的排序算法， 排序思路：遍历数组，每次遍历就将最大（或最小）值推至最前。越往后遍历查询次数越少</span><br><span class=\"line\">const bubbleSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[j - 1]) &#123;</span><br><span class=\"line\">        const tmp = list[j - 1];</span><br><span class=\"line\">        list[j - 1] = list[j];</span><br><span class=\"line\">        list[j] = tmp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 2、改进版冒泡排序 **********/</span><br><span class=\"line\">// 对上述冒泡排序的一种优化， 优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序。</span><br><span class=\"line\">const bubbleSort2 = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    let exchange = false;</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[j - 1]) &#123;</span><br><span class=\"line\">        const tmp = list[j - 1];</span><br><span class=\"line\">        list[j - 1] = list[j];</span><br><span class=\"line\">        list[j] = tmp;</span><br><span class=\"line\">        exchange = true;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!exchange) return list</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 3、选择排序 **********/</span><br><span class=\"line\">// 在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。</span><br><span class=\"line\">const selectionSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    let k = i</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[k]) k = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (k !== i) &#123;</span><br><span class=\"line\">      const tmp = list[k];</span><br><span class=\"line\">      list[k] = list[i];</span><br><span class=\"line\">      list[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 4、插入排序 **********/</span><br><span class=\"line\">// 最普通的排序算法， 从数组下标1开始每增1项排序一次，越往后遍历次数越多；</span><br><span class=\"line\">const insertSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 1; i &lt; len; i++) &#123;</span><br><span class=\"line\">    const tmp = list[i];</span><br><span class=\"line\">    let j = i - 1;</span><br><span class=\"line\">    while (j &gt;= 0 &amp;&amp; tmp &lt; list[j]) &#123;</span><br><span class=\"line\">      list[j + 1] = list[j];</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    list[j + 1] = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 5、快速排序 **********/</span><br><span class=\"line\">function quickSort(arr) &#123;</span><br><span class=\"line\">  const list = arr.slice(); //为了保证这个函数是纯函数，拷贝一次数组</span><br><span class=\"line\">  if (list.length &lt;= 1) return list;</span><br><span class=\"line\">  const pivot = list.splice(0, 1)[0]; //选第一个作为基数</span><br><span class=\"line\">  const left = [];</span><br><span class=\"line\">  const right = [];</span><br><span class=\"line\">  for (let i = 0, len = list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    if (list[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(list[i]);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      right.push(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>记录各种不同的排序算法</p>\n</blockquote>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [44, 92, 82, 48, 2, 51];</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 1、冒泡排序 **********/</span><br><span class=\"line\">// 很常见很容易理解的排序算法， 排序思路：遍历数组，每次遍历就将最大（或最小）值推至最前。越往后遍历查询次数越少</span><br><span class=\"line\">const bubbleSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[j - 1]) &#123;</span><br><span class=\"line\">        const tmp = list[j - 1];</span><br><span class=\"line\">        list[j - 1] = list[j];</span><br><span class=\"line\">        list[j] = tmp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 2、改进版冒泡排序 **********/</span><br><span class=\"line\">// 对上述冒泡排序的一种优化， 优化思路：当一次遍历前后数组不产生变化时，说明该数组已经有序，结束排序。</span><br><span class=\"line\">const bubbleSort2 = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    let exchange = false;</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[j - 1]) &#123;</span><br><span class=\"line\">        const tmp = list[j - 1];</span><br><span class=\"line\">        list[j - 1] = list[j];</span><br><span class=\"line\">        list[j] = tmp;</span><br><span class=\"line\">        exchange = true;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!exchange) return list</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 3、选择排序 **********/</span><br><span class=\"line\">// 在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。</span><br><span class=\"line\">const selectionSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    let k = i</span><br><span class=\"line\">    for (let j = len - 1; j &gt; i; j--) &#123;</span><br><span class=\"line\">      if (list[j] &lt; list[k]) k = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (k !== i) &#123;</span><br><span class=\"line\">      const tmp = list[k];</span><br><span class=\"line\">      list[k] = list[i];</span><br><span class=\"line\">      list[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 4、插入排序 **********/</span><br><span class=\"line\">// 最普通的排序算法， 从数组下标1开始每增1项排序一次，越往后遍历次数越多；</span><br><span class=\"line\">const insertSort = arr =&gt; &#123;</span><br><span class=\"line\">  const list = arr.slice(); //保证函数为纯函数</span><br><span class=\"line\">  const len = list.length;</span><br><span class=\"line\">  for (let i = 1; i &lt; len; i++) &#123;</span><br><span class=\"line\">    const tmp = list[i];</span><br><span class=\"line\">    let j = i - 1;</span><br><span class=\"line\">    while (j &gt;= 0 &amp;&amp; tmp &lt; list[j]) &#123;</span><br><span class=\"line\">      list[j + 1] = list[j];</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    list[j + 1] = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/********* 5、快速排序 **********/</span><br><span class=\"line\">function quickSort(arr) &#123;</span><br><span class=\"line\">  const list = arr.slice(); //为了保证这个函数是纯函数，拷贝一次数组</span><br><span class=\"line\">  if (list.length &lt;= 1) return list;</span><br><span class=\"line\">  const pivot = list.splice(0, 1)[0]; //选第一个作为基数</span><br><span class=\"line\">  const left = [];</span><br><span class=\"line\">  const right = [];</span><br><span class=\"line\">  for (let i = 0, len = list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    if (list[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(list[i]);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      right.push(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"函数防抖和函数节流","date":"2018-07-31T06:01:04.000Z","_content":"\n# 概念解释\n函数节流和函数防抖，两者都是优化高频率执行 js 代码的一种手段。\n\n在一定时间内，代码执行的次数不一定要非常多，达到一定的频率就足够了。有些情况下，代码运行频率达到一定程度时，超过那个频率所带来的效果是一样的，还不如把js代码执行的次数控制在一个合理的范围之内。既能够节省浏览器CPU的资源，又能够让页面浏览起来更加的顺畅，不会因为js的执行而发生卡顿。这就是我们要将的函数节流和函数防抖要做的事情。\n\n**函数防抖**是指在频繁触发的情况下，只有再有足够的空闲时间时，才执行一代码一次。比如生活中做公交车，在一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有没人刷卡了，司机才会开车。\n**函数节流**是指在一定时间内 js 只会执行一次。比如人眨眼睛，就是一定时间内眨一次。\n\n<!-- more -->\n# 示例\n防抖\n```\n// 简单示例\nwindow.addEventListener('resize',function(e){\n    var t;\n    return function(){\n        if(t) clearTimeout(t);\n        t = setTimeout(function(){\n            // do something...\n        },500);\n    }\n}());\n```\n\n节流\n```\n// 简单的节流函数\nfunction throttle(func, wait, mustRun) {\n    var timeout,\n        startTime = new Date();\n\n    return function() {\n        var context = this,\n            args = arguments,\n            curTime = new Date();\n\n        clearTimeout(timeout);\n        // 如果达到了规定的触发时间间隔，触发 handler\n        if(curTime - startTime >= mustRun){\n            func.apply(context,args);\n            startTime = curTime;\n        // 没达到触发间隔，重新设定定时器\n        }else{\n            timeout = setTimeout(func, wait);\n        }\n    };\n};\n// 实际想绑定在 scroll 事件上的 handler\nfunction realFunc(){\n    console.log(\"Success\");\n}\n// 采用了节流函数\nwindow.addEventListener('scroll',throttle(realFunc,500,1000));\n```\n","source":"_posts/函数防抖和函数节流.md","raw":"---\ntitle: 函数防抖和函数节流\ndate: 2018-07-31 14:01:04\ntags: JS\ncategories: JS\n---\n\n# 概念解释\n函数节流和函数防抖，两者都是优化高频率执行 js 代码的一种手段。\n\n在一定时间内，代码执行的次数不一定要非常多，达到一定的频率就足够了。有些情况下，代码运行频率达到一定程度时，超过那个频率所带来的效果是一样的，还不如把js代码执行的次数控制在一个合理的范围之内。既能够节省浏览器CPU的资源，又能够让页面浏览起来更加的顺畅，不会因为js的执行而发生卡顿。这就是我们要将的函数节流和函数防抖要做的事情。\n\n**函数防抖**是指在频繁触发的情况下，只有再有足够的空闲时间时，才执行一代码一次。比如生活中做公交车，在一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有没人刷卡了，司机才会开车。\n**函数节流**是指在一定时间内 js 只会执行一次。比如人眨眼睛，就是一定时间内眨一次。\n\n<!-- more -->\n# 示例\n防抖\n```\n// 简单示例\nwindow.addEventListener('resize',function(e){\n    var t;\n    return function(){\n        if(t) clearTimeout(t);\n        t = setTimeout(function(){\n            // do something...\n        },500);\n    }\n}());\n```\n\n节流\n```\n// 简单的节流函数\nfunction throttle(func, wait, mustRun) {\n    var timeout,\n        startTime = new Date();\n\n    return function() {\n        var context = this,\n            args = arguments,\n            curTime = new Date();\n\n        clearTimeout(timeout);\n        // 如果达到了规定的触发时间间隔，触发 handler\n        if(curTime - startTime >= mustRun){\n            func.apply(context,args);\n            startTime = curTime;\n        // 没达到触发间隔，重新设定定时器\n        }else{\n            timeout = setTimeout(func, wait);\n        }\n    };\n};\n// 实际想绑定在 scroll 事件上的 handler\nfunction realFunc(){\n    console.log(\"Success\");\n}\n// 采用了节流函数\nwindow.addEventListener('scroll',throttle(realFunc,500,1000));\n```\n","slug":"函数防抖和函数节流","published":1,"updated":"2019-05-27T07:37:01.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbf00089oqnqx4rcns2","content":"<h1 id=\"概念解释\"><a href=\"#概念解释\" class=\"headerlink\" title=\"概念解释\"></a>概念解释</h1><p>函数节流和函数防抖，两者都是优化高频率执行 js 代码的一种手段。</p>\n<p>在一定时间内，代码执行的次数不一定要非常多，达到一定的频率就足够了。有些情况下，代码运行频率达到一定程度时，超过那个频率所带来的效果是一样的，还不如把js代码执行的次数控制在一个合理的范围之内。既能够节省浏览器CPU的资源，又能够让页面浏览起来更加的顺畅，不会因为js的执行而发生卡顿。这就是我们要将的函数节流和函数防抖要做的事情。</p>\n<p><strong>函数防抖</strong>是指在频繁触发的情况下，只有再有足够的空闲时间时，才执行一代码一次。比如生活中做公交车，在一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有没人刷卡了，司机才会开车。<br><strong>函数节流</strong>是指在一定时间内 js 只会执行一次。比如人眨眼睛，就是一定时间内眨一次。</p>\n<a id=\"more\"></a>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>防抖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单示例</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;,function(e)&#123;</span><br><span class=\"line\">    var t;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        if(t) clearTimeout(t);</span><br><span class=\"line\">        t = setTimeout(function()&#123;</span><br><span class=\"line\">            // do something...</span><br><span class=\"line\">        &#125;,500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>节流<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单的节流函数</span><br><span class=\"line\">function throttle(func, wait, mustRun) &#123;</span><br><span class=\"line\">    var timeout,</span><br><span class=\"line\">        startTime = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        var context = this,</span><br><span class=\"line\">            args = arguments,</span><br><span class=\"line\">            curTime = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        // 如果达到了规定的触发时间间隔，触发 handler</span><br><span class=\"line\">        if(curTime - startTime &gt;= mustRun)&#123;</span><br><span class=\"line\">            func.apply(context,args);</span><br><span class=\"line\">            startTime = curTime;</span><br><span class=\"line\">        // 没达到触发间隔，重新设定定时器</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            timeout = setTimeout(func, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实际想绑定在 scroll 事件上的 handler</span><br><span class=\"line\">function realFunc()&#123;</span><br><span class=\"line\">    console.log(&quot;Success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 采用了节流函数</span><br><span class=\"line\">window.addEventListener(&apos;scroll&apos;,throttle(realFunc,500,1000));</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<h1 id=\"概念解释\"><a href=\"#概念解释\" class=\"headerlink\" title=\"概念解释\"></a>概念解释</h1><p>函数节流和函数防抖，两者都是优化高频率执行 js 代码的一种手段。</p>\n<p>在一定时间内，代码执行的次数不一定要非常多，达到一定的频率就足够了。有些情况下，代码运行频率达到一定程度时，超过那个频率所带来的效果是一样的，还不如把js代码执行的次数控制在一个合理的范围之内。既能够节省浏览器CPU的资源，又能够让页面浏览起来更加的顺畅，不会因为js的执行而发生卡顿。这就是我们要将的函数节流和函数防抖要做的事情。</p>\n<p><strong>函数防抖</strong>是指在频繁触发的情况下，只有再有足够的空闲时间时，才执行一代码一次。比如生活中做公交车，在一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有没人刷卡了，司机才会开车。<br><strong>函数节流</strong>是指在一定时间内 js 只会执行一次。比如人眨眼睛，就是一定时间内眨一次。</p>","more":"<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>防抖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单示例</span><br><span class=\"line\">window.addEventListener(&apos;resize&apos;,function(e)&#123;</span><br><span class=\"line\">    var t;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        if(t) clearTimeout(t);</span><br><span class=\"line\">        t = setTimeout(function()&#123;</span><br><span class=\"line\">            // do something...</span><br><span class=\"line\">        &#125;,500);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n<p>节流<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单的节流函数</span><br><span class=\"line\">function throttle(func, wait, mustRun) &#123;</span><br><span class=\"line\">    var timeout,</span><br><span class=\"line\">        startTime = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        var context = this,</span><br><span class=\"line\">            args = arguments,</span><br><span class=\"line\">            curTime = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        // 如果达到了规定的触发时间间隔，触发 handler</span><br><span class=\"line\">        if(curTime - startTime &gt;= mustRun)&#123;</span><br><span class=\"line\">            func.apply(context,args);</span><br><span class=\"line\">            startTime = curTime;</span><br><span class=\"line\">        // 没达到触发间隔，重新设定定时器</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            timeout = setTimeout(func, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 实际想绑定在 scroll 事件上的 handler</span><br><span class=\"line\">function realFunc()&#123;</span><br><span class=\"line\">    console.log(&quot;Success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 采用了节流函数</span><br><span class=\"line\">window.addEventListener(&apos;scroll&apos;,throttle(realFunc,500,1000));</span><br></pre></td></tr></table></figure></p>"},{"title":"如何制作blog","date":"2018-07-27T02:37:55.000Z","_content":"\n> 这是一篇关于如何用 github page 和 hexo 搭建博客的文章，因为技术太菜我打了一天才搭好，哭唧唧~(；д；) 今天就写出来告诉大家怎么搭建吧~ \n\n<!-- more -->\n\n1. 首先你要有个 github 账号，没有账号就去注册一个，不知道怎么注册的话去百度或者 google 一下。\n2. 然后你要新建一个仓库~ 仓库名称需要遵循一个规则，格式必须是：yourusername.github.io\n3. 准备 hexo 环境：\n    * 安装 node 环境(这一个步骤自己上网找怎么安装哈~ヾ(◍°∇°◍)ﾉﾞ)\n    * 安装 Hexo \n    ```\n        sudo npm install -g hexo-cl\n    ```\n    * 检查是否安装 \n    ```\n        hexo version\n    ```\n    * 手动创建一个放置 blog 的文件夹，创建完成后初始化 blog 目录\n    ```\n        hexo init <yourFloder>\n    ```\n    * hexo 的一些常用命令\n    ```\n        hexo new \"postName\" #新建文章\n        hexo new page \"pageName\" #新建页面\n        hexo generate #生成静态页面至public目录\n        hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n        hexo deploy #将.deploy目录部署到GitHub\n        hexo help #查看帮助\n    ```\n4. 配置你的 hexo\n   在创建完成之后，你会在对应的文件夹里面看到一个文件名为\"_config.yml\"的文件，在里面可以修改你的配置。\n   这边有一个对该文件的说明[ hexo 配置](https://hexo.io/zh-cn/docs/configuration.html)，参照文档进行修改~\n5. 关联 hexo 与 github\n   * 安装扩展\n    ```\n    npm install hexo-deployer-git --save\n    ```\n    * 修改\"_config.yml\"文件，配置如下：\n    ```\n    deploy:\n        type: git\n        repo: 刚刚步骤 '2' 中你创建的 github 地址\n        branch: master\n    ```\n    * 执行下列代码之后你写的博客内容就会上传至 github 了\n    ```\n    hexo clean \n    hexo generate\n    hexo deploy\n    ```\n\n","source":"_posts/如何制作blog.md","raw":"---\ntitle: 如何制作blog\ndate: 2018-07-27 10:37:55\ntags: JS\ncategories: JS\n---\n\n> 这是一篇关于如何用 github page 和 hexo 搭建博客的文章，因为技术太菜我打了一天才搭好，哭唧唧~(；д；) 今天就写出来告诉大家怎么搭建吧~ \n\n<!-- more -->\n\n1. 首先你要有个 github 账号，没有账号就去注册一个，不知道怎么注册的话去百度或者 google 一下。\n2. 然后你要新建一个仓库~ 仓库名称需要遵循一个规则，格式必须是：yourusername.github.io\n3. 准备 hexo 环境：\n    * 安装 node 环境(这一个步骤自己上网找怎么安装哈~ヾ(◍°∇°◍)ﾉﾞ)\n    * 安装 Hexo \n    ```\n        sudo npm install -g hexo-cl\n    ```\n    * 检查是否安装 \n    ```\n        hexo version\n    ```\n    * 手动创建一个放置 blog 的文件夹，创建完成后初始化 blog 目录\n    ```\n        hexo init <yourFloder>\n    ```\n    * hexo 的一些常用命令\n    ```\n        hexo new \"postName\" #新建文章\n        hexo new page \"pageName\" #新建页面\n        hexo generate #生成静态页面至public目录\n        hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n        hexo deploy #将.deploy目录部署到GitHub\n        hexo help #查看帮助\n    ```\n4. 配置你的 hexo\n   在创建完成之后，你会在对应的文件夹里面看到一个文件名为\"_config.yml\"的文件，在里面可以修改你的配置。\n   这边有一个对该文件的说明[ hexo 配置](https://hexo.io/zh-cn/docs/configuration.html)，参照文档进行修改~\n5. 关联 hexo 与 github\n   * 安装扩展\n    ```\n    npm install hexo-deployer-git --save\n    ```\n    * 修改\"_config.yml\"文件，配置如下：\n    ```\n    deploy:\n        type: git\n        repo: 刚刚步骤 '2' 中你创建的 github 地址\n        branch: master\n    ```\n    * 执行下列代码之后你写的博客内容就会上传至 github 了\n    ```\n    hexo clean \n    hexo generate\n    hexo deploy\n    ```\n\n","slug":"如何制作blog","published":1,"updated":"2019-05-27T07:37:01.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbi000c9oqnh3a9rqnk","content":"<blockquote>\n<p>这是一篇关于如何用 github page 和 hexo 搭建博客的文章，因为技术太菜我打了一天才搭好，哭唧唧~(；д；) 今天就写出来告诉大家怎么搭建吧~ </p>\n</blockquote>\n<a id=\"more\"></a>\n<ol>\n<li>首先你要有个 github 账号，没有账号就去注册一个，不知道怎么注册的话去百度或者 google 一下。</li>\n<li>然后你要新建一个仓库~ 仓库名称需要遵循一个规则，格式必须是：yourusername.github.io</li>\n<li><p>准备 hexo 环境：</p>\n<ul>\n<li>安装 node 环境(这一个步骤自己上网找怎么安装哈~ヾ(◍°∇°◍)ﾉﾞ)</li>\n<li><p>安装 Hexo </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动创建一个放置 blog 的文件夹，创建完成后初始化 blog 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;yourFloder&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hexo 的一些常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo help #查看帮助</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置你的 hexo<br>在创建完成之后，你会在对应的文件夹里面看到一个文件名为”_config.yml”的文件，在里面可以修改你的配置。<br>这边有一个对该文件的说明<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\"> hexo 配置</a>，参照文档进行修改~</p>\n</li>\n<li><p>关联 hexo 与 github</p>\n<ul>\n<li><p>安装扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>修改”_config.yml”文件，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: 刚刚步骤 &apos;2&apos; 中你创建的 github 地址</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行下列代码之后你写的博客内容就会上传至 github 了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>这是一篇关于如何用 github page 和 hexo 搭建博客的文章，因为技术太菜我打了一天才搭好，哭唧唧~(；д；) 今天就写出来告诉大家怎么搭建吧~ </p>\n</blockquote>","more":"<ol>\n<li>首先你要有个 github 账号，没有账号就去注册一个，不知道怎么注册的话去百度或者 google 一下。</li>\n<li>然后你要新建一个仓库~ 仓库名称需要遵循一个规则，格式必须是：yourusername.github.io</li>\n<li><p>准备 hexo 环境：</p>\n<ul>\n<li>安装 node 环境(这一个步骤自己上网找怎么安装哈~ヾ(◍°∇°◍)ﾉﾞ)</li>\n<li><p>安装 Hexo </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cl</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动创建一个放置 blog 的文件夹，创建完成后初始化 blog 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;yourFloder&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hexo 的一些常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo help #查看帮助</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置你的 hexo<br>在创建完成之后，你会在对应的文件夹里面看到一个文件名为”_config.yml”的文件，在里面可以修改你的配置。<br>这边有一个对该文件的说明<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\"> hexo 配置</a>，参照文档进行修改~</p>\n</li>\n<li><p>关联 hexo 与 github</p>\n<ul>\n<li><p>安装扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>修改”_config.yml”文件，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: 刚刚步骤 &apos;2&apos; 中你创建的 github 地址</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行下列代码之后你写的博客内容就会上传至 github 了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"微信小程序","date":"2019-02-12T02:44:49.000Z","_content":"\n> 记录小程序的学习\n\n<!-- more -->\n\n1. 小程序api网址：https://developers.weixin.qq.com/miniprogram/dev/api/\n2. 不能操作dom节点，只能通过操作数据来操作\n3. project.config.json 设置配置文件存储的地方","source":"_posts/微信小程序.md","raw":"---\ntitle: 微信小程序\ndate: 2019-02-12 10:44:49\ntags: JS\ncategories: JS\n---\n\n> 记录小程序的学习\n\n<!-- more -->\n\n1. 小程序api网址：https://developers.weixin.qq.com/miniprogram/dev/api/\n2. 不能操作dom节点，只能通过操作数据来操作\n3. project.config.json 设置配置文件存储的地方","slug":"微信小程序","published":1,"updated":"2019-05-27T07:37:01.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbj000d9oqndq90a0lr","content":"<blockquote>\n<p>记录小程序的学习</p>\n</blockquote>\n<a id=\"more\"></a>\n<ol>\n<li>小程序api网址：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/api/</a></li>\n<li>不能操作dom节点，只能通过操作数据来操作</li>\n<li>project.config.json 设置配置文件存储的地方</li>\n</ol>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>记录小程序的学习</p>\n</blockquote>","more":"<ol>\n<li>小程序api网址：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/api/</a></li>\n<li>不能操作dom节点，只能通过操作数据来操作</li>\n<li>project.config.json 设置配置文件存储的地方</li>\n</ol>"},{"title":"数组的 map、filter、sort 和 reduce 的用法","date":"2018-08-01T03:54:05.000Z","_content":"\n> 本文文章来讲述一下关于map、filter、sort 和 reduce 的用法，如果有错误的地方欢迎下伙伴来指正、\n\n<!-- more -->\n\n# 基本概念\n\n1. map 遍历数组返回一个新的数组，返回的是加工之后的值。\n2. filter 遍历过滤出一个新的子数组， 返回条件为true的值。\n3. sort 数组排序。\n4. reduce 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\n    reduce() 可以作为一个高阶函数，用于函数的 compose。\n    reduce() 对于空数组是不会执行对调函数的。\n\n# 通过一些题目来更加熟悉这些东西吧~\n## 题目\n这个题目是网上获取的，可以再浏览器控制台打印结果。这边给出两个数组\n* 第一个数组\n```\nconst inventors = [\n    { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n    { first: 'wawa', last: 'fs', year: 1830, passed: 1905 },\n    { first: 'grvd', last: 'xcvxcv', year:1900, passed: 1977 },\n    { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }\n];\n```\n* 第二个数组\n```\n['Albert, Einstein', 'wawa, fs', 'grvd, xcvxcv', 'Hanna, Hammarström']\n```\n\n**题目如下：**\n* 筛选出生于1800-1900的发明家；\n* 以数组形式，列出其名与姓；\n* 根据其出生日期，并从大到小排序；\n* 计算所有的发明家加起来一共活了几岁；\n\n## 解决方法\n* 第一个问题：筛选出生于1800-1900的人。\n  这边因为是筛选，可以用 filter 方法。\n  **注意**：filter 不会对空数组进行检测\n  **注意**：filter 不会改变原始数组\n  ```\n  funtction born(inventor) {\n      return inventor.year >= 1800 && inventor.year < 1900;\n  }\n  var person = inventors.filter(born); // filter 参数是一个函数，做筛选用。\n  console.log(person);\n  // 简化的写法\n  var person = inventors.filter(inventor => (inventor.year >= 1800 && inventor.year < 1900));\n  ```\n\n* 第二个问题：以数组形式，列出其名与姓。\n  以数组形式返回，可以对原数组进行处理，这边用 map 方法。\n  **注意**：map 不会对空数组进行检测\n  **注意**：map 不会改变原始数组\n  ```\n   const fullnames = inventors.map(inventor => `${inventor.first} ${inventor.last}`);\n   console.log(fullnames);\n  ```\n* 第三个问题：根据其出生日期，并从大到小排序。\n  按照出生日期进行排序，采用 sort 方法。\n  ```\n   const birthdate = inventors.sort((inventora, inventorb) => (inventorb.year - inventora.year));\n   console.log(birthdate)\n  ```\n* 第四个问题：计算所有的发明家加起来一共活了几岁。\n  计算总过获得岁数，采用 reduce 方法\n  ```\n  const totalyears = inventors.reduce(\n      (total, inventor) => { return total + (inventor.passed - inventor.year); }, 0\n      );\n  console.log(totalyears);\n  ```\n\n","source":"_posts/数组的map.md","raw":"---\ntitle: 数组的 map、filter、sort 和 reduce 的用法\ndate: 2018-08-01 11:54:05\ntags: JS\ncategories: JS\n---\n\n> 本文文章来讲述一下关于map、filter、sort 和 reduce 的用法，如果有错误的地方欢迎下伙伴来指正、\n\n<!-- more -->\n\n# 基本概念\n\n1. map 遍历数组返回一个新的数组，返回的是加工之后的值。\n2. filter 遍历过滤出一个新的子数组， 返回条件为true的值。\n3. sort 数组排序。\n4. reduce 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\n    reduce() 可以作为一个高阶函数，用于函数的 compose。\n    reduce() 对于空数组是不会执行对调函数的。\n\n# 通过一些题目来更加熟悉这些东西吧~\n## 题目\n这个题目是网上获取的，可以再浏览器控制台打印结果。这边给出两个数组\n* 第一个数组\n```\nconst inventors = [\n    { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n    { first: 'wawa', last: 'fs', year: 1830, passed: 1905 },\n    { first: 'grvd', last: 'xcvxcv', year:1900, passed: 1977 },\n    { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }\n];\n```\n* 第二个数组\n```\n['Albert, Einstein', 'wawa, fs', 'grvd, xcvxcv', 'Hanna, Hammarström']\n```\n\n**题目如下：**\n* 筛选出生于1800-1900的发明家；\n* 以数组形式，列出其名与姓；\n* 根据其出生日期，并从大到小排序；\n* 计算所有的发明家加起来一共活了几岁；\n\n## 解决方法\n* 第一个问题：筛选出生于1800-1900的人。\n  这边因为是筛选，可以用 filter 方法。\n  **注意**：filter 不会对空数组进行检测\n  **注意**：filter 不会改变原始数组\n  ```\n  funtction born(inventor) {\n      return inventor.year >= 1800 && inventor.year < 1900;\n  }\n  var person = inventors.filter(born); // filter 参数是一个函数，做筛选用。\n  console.log(person);\n  // 简化的写法\n  var person = inventors.filter(inventor => (inventor.year >= 1800 && inventor.year < 1900));\n  ```\n\n* 第二个问题：以数组形式，列出其名与姓。\n  以数组形式返回，可以对原数组进行处理，这边用 map 方法。\n  **注意**：map 不会对空数组进行检测\n  **注意**：map 不会改变原始数组\n  ```\n   const fullnames = inventors.map(inventor => `${inventor.first} ${inventor.last}`);\n   console.log(fullnames);\n  ```\n* 第三个问题：根据其出生日期，并从大到小排序。\n  按照出生日期进行排序，采用 sort 方法。\n  ```\n   const birthdate = inventors.sort((inventora, inventorb) => (inventorb.year - inventora.year));\n   console.log(birthdate)\n  ```\n* 第四个问题：计算所有的发明家加起来一共活了几岁。\n  计算总过获得岁数，采用 reduce 方法\n  ```\n  const totalyears = inventors.reduce(\n      (total, inventor) => { return total + (inventor.passed - inventor.year); }, 0\n      );\n  console.log(totalyears);\n  ```\n\n","slug":"数组的map","published":1,"updated":"2019-05-27T07:37:01.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbp000i9oqn51ehisao","content":"<blockquote>\n<p>本文文章来讲述一下关于map、filter、sort 和 reduce 的用法，如果有错误的地方欢迎下伙伴来指正、</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ol>\n<li>map 遍历数组返回一个新的数组，返回的是加工之后的值。</li>\n<li>filter 遍历过滤出一个新的子数组， 返回条件为true的值。</li>\n<li>sort 数组排序。</li>\n<li>reduce 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br> reduce() 可以作为一个高阶函数，用于函数的 compose。<br> reduce() 对于空数组是不会执行对调函数的。</li>\n</ol>\n<h1 id=\"通过一些题目来更加熟悉这些东西吧\"><a href=\"#通过一些题目来更加熟悉这些东西吧\" class=\"headerlink\" title=\"通过一些题目来更加熟悉这些东西吧~\"></a>通过一些题目来更加熟悉这些东西吧~</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>这个题目是网上获取的，可以再浏览器控制台打印结果。这边给出两个数组</p>\n<ul>\n<li><p>第一个数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const inventors = [</span><br><span class=\"line\">    &#123; first: &apos;Albert&apos;, last: &apos;Einstein&apos;, year: 1879, passed: 1955 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;wawa&apos;, last: &apos;fs&apos;, year: 1830, passed: 1905 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;grvd&apos;, last: &apos;xcvxcv&apos;, year:1900, passed: 1977 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;Hanna&apos;, last: &apos;Hammarström&apos;, year: 1829, passed: 1909 &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;Albert, Einstein&apos;, &apos;wawa, fs&apos;, &apos;grvd, xcvxcv&apos;, &apos;Hanna, Hammarström&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>题目如下：</strong></p>\n<ul>\n<li>筛选出生于1800-1900的发明家；</li>\n<li>以数组形式，列出其名与姓；</li>\n<li>根据其出生日期，并从大到小排序；</li>\n<li>计算所有的发明家加起来一共活了几岁；</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>第一个问题：筛选出生于1800-1900的人。<br>这边因为是筛选，可以用 filter 方法。<br><strong>注意</strong>：filter 不会对空数组进行检测<br><strong>注意</strong>：filter 不会改变原始数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funtction born(inventor) &#123;</span><br><span class=\"line\">    return inventor.year &gt;= 1800 &amp;&amp; inventor.year &lt; 1900;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = inventors.filter(born); // filter 参数是一个函数，做筛选用。</span><br><span class=\"line\">console.log(person);</span><br><span class=\"line\">// 简化的写法</span><br><span class=\"line\">var person = inventors.filter(inventor =&gt; (inventor.year &gt;= 1800 &amp;&amp; inventor.year &lt; 1900));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个问题：以数组形式，列出其名与姓。<br>以数组形式返回，可以对原数组进行处理，这边用 map 方法。<br><strong>注意</strong>：map 不会对空数组进行检测<br><strong>注意</strong>：map 不会改变原始数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fullnames = inventors.map(inventor =&gt; `$&#123;inventor.first&#125; $&#123;inventor.last&#125;`);</span><br><span class=\"line\">console.log(fullnames);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三个问题：根据其出生日期，并从大到小排序。<br>按照出生日期进行排序，采用 sort 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const birthdate = inventors.sort((inventora, inventorb) =&gt; (inventorb.year - inventora.year));</span><br><span class=\"line\">console.log(birthdate)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第四个问题：计算所有的发明家加起来一共活了几岁。<br>计算总过获得岁数，采用 reduce 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const totalyears = inventors.reduce(</span><br><span class=\"line\">    (total, inventor) =&gt; &#123; return total + (inventor.passed - inventor.year); &#125;, 0</span><br><span class=\"line\">    );</span><br><span class=\"line\">console.log(totalyears);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>本文文章来讲述一下关于map、filter、sort 和 reduce 的用法，如果有错误的地方欢迎下伙伴来指正、</p>\n</blockquote>","more":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ol>\n<li>map 遍历数组返回一个新的数组，返回的是加工之后的值。</li>\n<li>filter 遍历过滤出一个新的子数组， 返回条件为true的值。</li>\n<li>sort 数组排序。</li>\n<li>reduce 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br> reduce() 可以作为一个高阶函数，用于函数的 compose。<br> reduce() 对于空数组是不会执行对调函数的。</li>\n</ol>\n<h1 id=\"通过一些题目来更加熟悉这些东西吧\"><a href=\"#通过一些题目来更加熟悉这些东西吧\" class=\"headerlink\" title=\"通过一些题目来更加熟悉这些东西吧~\"></a>通过一些题目来更加熟悉这些东西吧~</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>这个题目是网上获取的，可以再浏览器控制台打印结果。这边给出两个数组</p>\n<ul>\n<li><p>第一个数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const inventors = [</span><br><span class=\"line\">    &#123; first: &apos;Albert&apos;, last: &apos;Einstein&apos;, year: 1879, passed: 1955 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;wawa&apos;, last: &apos;fs&apos;, year: 1830, passed: 1905 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;grvd&apos;, last: &apos;xcvxcv&apos;, year:1900, passed: 1977 &#125;,</span><br><span class=\"line\">    &#123; first: &apos;Hanna&apos;, last: &apos;Hammarström&apos;, year: 1829, passed: 1909 &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;Albert, Einstein&apos;, &apos;wawa, fs&apos;, &apos;grvd, xcvxcv&apos;, &apos;Hanna, Hammarström&apos;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>题目如下：</strong></p>\n<ul>\n<li>筛选出生于1800-1900的发明家；</li>\n<li>以数组形式，列出其名与姓；</li>\n<li>根据其出生日期，并从大到小排序；</li>\n<li>计算所有的发明家加起来一共活了几岁；</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li><p>第一个问题：筛选出生于1800-1900的人。<br>这边因为是筛选，可以用 filter 方法。<br><strong>注意</strong>：filter 不会对空数组进行检测<br><strong>注意</strong>：filter 不会改变原始数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funtction born(inventor) &#123;</span><br><span class=\"line\">    return inventor.year &gt;= 1800 &amp;&amp; inventor.year &lt; 1900;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person = inventors.filter(born); // filter 参数是一个函数，做筛选用。</span><br><span class=\"line\">console.log(person);</span><br><span class=\"line\">// 简化的写法</span><br><span class=\"line\">var person = inventors.filter(inventor =&gt; (inventor.year &gt;= 1800 &amp;&amp; inventor.year &lt; 1900));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二个问题：以数组形式，列出其名与姓。<br>以数组形式返回，可以对原数组进行处理，这边用 map 方法。<br><strong>注意</strong>：map 不会对空数组进行检测<br><strong>注意</strong>：map 不会改变原始数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fullnames = inventors.map(inventor =&gt; `$&#123;inventor.first&#125; $&#123;inventor.last&#125;`);</span><br><span class=\"line\">console.log(fullnames);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三个问题：根据其出生日期，并从大到小排序。<br>按照出生日期进行排序，采用 sort 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const birthdate = inventors.sort((inventora, inventorb) =&gt; (inventorb.year - inventora.year));</span><br><span class=\"line\">console.log(birthdate)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第四个问题：计算所有的发明家加起来一共活了几岁。<br>计算总过获得岁数，采用 reduce 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const totalyears = inventors.reduce(</span><br><span class=\"line\">    (total, inventor) =&gt; &#123; return total + (inventor.passed - inventor.year); &#125;, 0</span><br><span class=\"line\">    );</span><br><span class=\"line\">console.log(totalyears);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"记一次换电脑之后hexo 怎么处理","date":"2019-05-27T07:48:41.000Z","_content":"\n> 记一次换电脑之后hexo 怎么处理\n\n<!-- more -->\n\n之前的博客都是在公司电脑上抽空写的，换了公司之后想要重新写这个blog，发现下载之后会出现一个问题，```No layout:index.html```<br>\n\n遇到这个问题我就要想要怎么处理不是.<br>\n\n我把所有npm中该下载的都下载了，发现还是不对。然后我查看内容之后还是不对，我把所有的下载啥的都尝试了之后，还是不行我咋整呀。我都想放弃了，重新搞一个拉倒<br>\n\n然后我查看了我的themes里面的主题 发现我的主题是空的，之后下载了主题之后就好了，∑(っ°Д°;)っ卧槽。<br>\n\ngit 的问题可以通过 删除.deploy_git 就好了","source":"_posts/记一次换电脑之后hexo-怎么处理.md","raw":"---\ntitle: 记一次换电脑之后hexo 怎么处理\ndate: 2019-05-27 15:48:41\ntags: JS\ncategories: JS\n---\n\n> 记一次换电脑之后hexo 怎么处理\n\n<!-- more -->\n\n之前的博客都是在公司电脑上抽空写的，换了公司之后想要重新写这个blog，发现下载之后会出现一个问题，```No layout:index.html```<br>\n\n遇到这个问题我就要想要怎么处理不是.<br>\n\n我把所有npm中该下载的都下载了，发现还是不对。然后我查看内容之后还是不对，我把所有的下载啥的都尝试了之后，还是不行我咋整呀。我都想放弃了，重新搞一个拉倒<br>\n\n然后我查看了我的themes里面的主题 发现我的主题是空的，之后下载了主题之后就好了，∑(っ°Д°;)っ卧槽。<br>\n\ngit 的问题可以通过 删除.deploy_git 就好了","slug":"记一次换电脑之后hexo-怎么处理","published":1,"updated":"2019-05-27T09:03:21.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfbr000k9oqnzngnw8nb","content":"<blockquote>\n<p>记一次换电脑之后hexo 怎么处理</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>之前的博客都是在公司电脑上抽空写的，换了公司之后想要重新写这个blog，发现下载之后会出现一个问题，<code>No layout:index.html</code><br></p>\n<p>遇到这个问题我就要想要怎么处理不是.<br></p>\n<p>我把所有npm中该下载的都下载了，发现还是不对。然后我查看内容之后还是不对，我把所有的下载啥的都尝试了之后，还是不行我咋整呀。我都想放弃了，重新搞一个拉倒<br></p>\n<p>然后我查看了我的themes里面的主题 发现我的主题是空的，之后下载了主题之后就好了，∑(っ°Д°;)っ卧槽。<br></p>\n<p>git 的问题可以通过 删除.deploy_git 就好了</p>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>记一次换电脑之后hexo 怎么处理</p>\n</blockquote>","more":"<p>之前的博客都是在公司电脑上抽空写的，换了公司之后想要重新写这个blog，发现下载之后会出现一个问题，<code>No layout:index.html</code><br></p>\n<p>遇到这个问题我就要想要怎么处理不是.<br></p>\n<p>我把所有npm中该下载的都下载了，发现还是不对。然后我查看内容之后还是不对，我把所有的下载啥的都尝试了之后，还是不行我咋整呀。我都想放弃了，重新搞一个拉倒<br></p>\n<p>然后我查看了我的themes里面的主题 发现我的主题是空的，之后下载了主题之后就好了，∑(っ°Д°;)っ卧槽。<br></p>\n<p>git 的问题可以通过 删除.deploy_git 就好了</p>"},{"title":"vue学习","date":"2019-05-29T01:20:46.000Z","_content":"\n> 记录 Vue 的学习, Vue -渐进式JavaScript框架\n\n<!-- more -->\n\n## MVC 与 MVVM 的区别\nMVC 是指 Model View Controller（模型-视图-控制器），是一种 Web 架构的模式。\nMVVM 是指 Model-View-ViewModel，是一种基于前端开发的架构模式。\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 MVC模型关注的是Model的不变，所以，在MVC模型里，Model不依赖于View，但是 View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\nMVVM在概念上是真正将页面与数据逻辑分离的模式，它把数据绑定工作放到一个JS里去实现，而这个JS文件的主要功能是完成数据的绑定，即把model绑定到UI的元素上。\n\n## Vue 实例\n<b>注意点：</b>\n1. 需要先在data中声明数据，再使用数据\n2. 可以通过 vm.$data 访问到data中的所有属性，或者 vm.msg\n\n## 双向数据绑定\n将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响。通过 getter 和 setter 来实现双向绑定\n\n## 动态添加数据的注意点\n只有 data 中的数据才是响应式的，动态添加进来的数据默认为非响应式\n可以通过以下方式实现动态添加数据的响应式\n1. Vue.set(object, key, value) - 适用于添加单个属性\n2. Object.assign() - 适用于添加多个属性\n\n## 异步 DOM 更新\n* 说明：Vue 异步执行 DOM 更新，监视所有数据改变，一次性更新DOM\n* 优势：可以去除重复数据，对于避免不必要的计算和避免重复 DOM 操作上，非常重要\n* 如果需要那到更新后 DOM 中的数据，则需要通过 Vue.nextTick(callback)：在DOM更新后，执行某个操作（属于DOM操作） 实例调用 vm.$nextTick(function () {})\n\n## Vue 指令\nVue 指令一般是带有 v- 前缀的特殊属性，当表达式的值改变是，将其产生的连带影响，响应式地作用于 DOM\n* v-text: 更新 DOM 对象的 textContent\n* v-html: 更新 DOM 对象的 innerHTML\n* v-bind: 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM\n* v-on: 绑定事件， 绑定的事件定义在 methods 中\n* 事件修饰符\n    * .stop 阻止冒泡，调用 event.stopPropagation()\n    * .prevent 阻止默认行为，调用 event.preventDefault()\n    * .capture 添加事件侦听器时使用事件捕获模式\n    * .self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件\n    * .once 事件只触发一次\n* v-model: 在表单元素上创建双向数据绑定，监听用户的输入事件以更新数据\n* v-for: 基于源数据多次渲染元素或模板块\n* key属性: 使用 v-for 的时候提供 key 属性，以获得性能提升。使用 key，Vue 会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。\n\n## 样式处理 -class 和 style\n使用方式：v-bind:class=\"expression\" or :class=\"expression\"， 表达式的类型：字符串、数组、对象（重点）\n\n* v-if 和 v-show\n    * v-if: 根据表达式的值的真假条件，销毁或重建元素\n    * v-show: 根据表达式之真假值，切换元素的 display CSS 属性\n\n* 提升性能: v-pre\nvue会跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译\n\n* 提升性能：v-once\nvue只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。\n\n## 过滤器 filter\n文本数据格式化\n* 全局过滤器\n通过全局方式创建的过滤器，在任何一个vue实例中都可以使用。使用全局过滤器的时候，需要先创建全局过滤器，再创建Vue实例。显示的内容由过滤器的返回值决定\n* 局部过滤器\n局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用\n\n## 按键值修饰符\n在监听键盘事件时，Vue 允许为 v-on 在监听键盘事件时添加关键修饰符。例如@keyup.13=\"submit\"\n\n## 监视数据变化 - watch\nwatch是一个对象，键是需要观察的表达式，值是对应回调函数，当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作\n\n## 实例生命周期\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象即可 (一些根实例特有的选项除外)。\n实例生命周期也叫做：组件生命周期\n\n### 生命周期介绍\n一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期\n生命周期钩子函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，这些事件，统称为组件的生命周期函数！\n注意：\n* Vue在执行过程中会自动调用生命周期钩子函数，我们只需要提供这些钩子函数即可\n* 钩子函数的名称都是Vue中规定好的！\n\n### 钩子函数 - beforeCreate()\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n注意：此时，无法获取 data中的数据、methods中的方法\n\n### 钩子函数 - created()\n注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据 [参考资料1](https://segmentfault.com/a/1190000008879966) [参考资料2](https://segmentfault.com/a/1190000008010666)\n\n### 钩子函数 - beforeMounted()\n在挂载开始之前被调用\n\n### 钩子函数 - mounted()\n此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作\n\n### 钩子函数 - beforeUpdated()\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n注意：此处获取的数据是更新后的数据，但是获取页面中的DOM元素是更新之前的\n\n### 钩子函数 - updated()\n组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n\n### 钩子函数 - beforeDestroy()\n实例销毁之前调用。在这一步，实例仍然完全可用。\n使用场景：实例销毁之前，执行清理任务，比如：清除定时器等\n\n### 钩子函数 - destroyed()\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n## axios\n* Promise based HTTP client for the browser and node.js\n    * 以Promise为基础的HTTP客户端，适用于：浏览器和node.js\n    * 封装ajax，用来发送请求，异步获取数据\n* 安装：npm i -S axios\n* 拦截器：拦截器会拦截发送的每一个请求，请求发送之前执行request中的函数，请求发送完成之后执行response中的函数\n\n## 自定义组件\n* 作用：进行DOM操作\n* 使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点\n* 两种指令：1 全局指令 2 局部指令\n\n## 组件\n> 组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树\n\n创建组件的两种方式：1 全局组件 2 局部组件\n\n### 全局组件\n* 说明：全局组件在所有的vue实例中都可以使用\n* 注意：先注册组件，再初始化根实例\n* extend：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\n\n### 局部组件\n局部组件，是在某一个具体的vue实例中定义的，只能在这个vue实例中使用\n\n### is特性\n> 在某些特定的标签中只能存在指定表恰 如ul > li 如果要浏览器正常解析则需要使用is\n\n## 组件通讯\n### 父组件到子组件\n通过子组件props属性来传递数据 props是一个数组, 传递过来的props属性的用法与data属性的用法相同\n注意：属性的值必须在组件中通过props属性显示指定，否则，不会生效\n\n### 子组件到父组件\n父组件给子组件传递一个函数，由子组件调用这个函数。借助vue中的自定义事件（v-on:cunstomFn=\"fn\"）\n步骤：\n1. 在父组件中定义方法 parentFn\n2. 在子组件 组件引入标签 中绑定自定义事件 v-on:自定义事件名=\"父组件中的方法\" ==> @pfn=\"parentFn\"\n3. 子组件中通过$emit()触发自定义事件事件 this.$emit(pfn,参数列表。。。)\n\n### 非父子组件通讯\n> 在简单的场景下，可以使用一个空的 Vue 实例作为事件总线\n$on()：绑定自定义事件\n\n### 内容分发\n通过<slot></slot> 标签指定内容展示区域\n\n### 获取组件（或元素） - refs\nvm.$refs 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）.在 HTML元素 中，添加ref属性，然后在JS中通过vm.$refs.属性来获取\n注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods\n\n## SPA -单页应用程序\n### SPA： Single Page Application\n> 单页Web应用（single page application，SPA），就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。\n\n* 单页面应用程序：只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中\n* 传统多页面应用程序：对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面\n优势:\n* 减少了请求体积，加快页面响应速度，降低了对服务器的压力\n* 更好的用户体验，让用户在web app感受native app的流畅\n实现思路和技术点\n1. ajax\n2. 锚点的使用（window.location.hash #）\n3. hashchange 事件 window.addEventListener(\"hashchange\",function () {})\n4. 监听锚点值变化的事件，根据不同的锚点值，请求相应的数据\n5. 原本用作页面内部进行跳转，定位并展示相应的内容\n\n### 路由\n路由即：浏览器中的哈希值（# hash）与展示视图内容（template）之间的对应规则\nvue中的路由是：hash 和 component的对应关系,在 Web app 中，通过一个页面来展示和管理整个应用的功能。SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容\n基本使用 安装：npm i -S vue-router\n重定向 { path: '/', redirect: '/home' }\n路由其他配置 \n* 路由导航高亮 当前匹配的导航链接，会自动添加router-link-exact-active router-link-active类\n* 匹配路由模式 配置：mode\n路由参数\n* 说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理\n* 语法：/user/:id\n* 使用：当匹配到一个路由时，参数值会被设置到 this.$route.params\n* 其他：可以通过 $route.query 获取到 URL 中的查询参数 等\n嵌套路由 - 子路由\n* 路由是可以嵌套的，即：路由中又包含子路由\n* 规则：父组件中包含 router-view，在路由规则中使用 children 配置\n\n## 前端模块化\n为什么需要模块化?\n1. 最开始的js就是为了实现客户端验证以及一些简单的效果\n2. 后来，js得到重视，应用越来越广泛，前端开发的复杂度越来越高\n3. 旧版本的js中没有提供与模块（module）相关的内容\n### 模块的概念\n* 在js中，一个模块就是实现特定功能的文件（js文件）\n* 遵循模块的机制，想要什么功能就加载什么模块\n* 模块化开发需要遵循规范\n\n### 模块化解决的问题\n1. 命名冲突\n2. 文件依赖（加载文件）\n3. 模块的复用\n4. 统一规范和开发方式\n\n### JS实现模块化的规范\nAMD 的使用\n> Asynchronous Module Definition：异步模块定义，浏览器端模块开发的规范 代表：require.js 特点：模块被异步加载，模块加载不影响后面语句的运行\n\n1. 定义模块\n```\n    // 语法:define(name, dependencies?, factory);\n    // name表示：当前模块的名称，是一个字符串 可有可无\n    // dependencies表示：当前模块的依赖项，是一个数组无论依赖一项还是多项 无则不写\n    // factory表示：当前模块要完成的一些功能，是一个函数\n    \n    // 定义对象模块\n    define({})\n    // 定义方法模块\n    define(function() {\n      return {}\n    })\n    // 定义带有依赖项的模块\n    define(['js/a'], function() {})\n```\n\n2. 加载模块\n```\n    // - 注意：require的第一个参数必须是数组\n\n    // 参数必须是数组 表示模块路径 以当前文件为基准,通过回调函数中的参数获取加载模块中的变量 参数与模块按照顺序一一对应\n    require(['a', 'js/b'], function(a, b) {\n      // 使用模块a 和 模块b 中的代码\n    })\n```\n\n3. 路径查找配置\n    * requirejs 默认使用 baseUrl+paths 的路径解析方式\n    * 可以使用以下方式避开此设置：1 以.js结尾 2 以 / 开始 3 包含协议：https:// 或 http://\n```\n    // 配置示例\n    // 注意配置应当在使用之前\n    require.config({\n      baseUrl: './js' // 配置基础路径为：当前目录下的js目录\n    })\n    require(['a'])    // 查找 基础路径下的 ./js/a.js\n\n    // 简化加载模块路径\n    require.config({\n      baseUrl: './js',\n      // 配置一次即可，直接通过路径名称（template || jquery）加载模块\n      paths: {\n        template: 'assets/artTemplate/template-native',\n        jquery: 'assets/jquery/jquery.min'\n      }\n    })\n    // 加载jquery template模块\n    require(['jquery', 'template'])\n```\n\n4. 非模块化和依赖项支持\n    * 添加模块的依赖模块，保证加载顺序（deps）\n    * 将非模块化模块，转化为模块化（exports）\n```\n    // 示例\n    require.config({\n      baseUrl: './js',\n      paths: {\n        // 配置路径\n        noModule: 'assets/demo/noModule'\n      },\n      // 配置不符合规范的模块项\n      shim: {\n        // 模块名称\n        noModule: {\n          deps: [],         // 依赖项\n          exports: 'sayHi'  // 导出模块中存在的函数或变量\n        }\n      }\n    });\n\n    // 注意点  如果定义模块的时候，指定了模块名称，需要使用该名称来引用模块\n    // 定义 这个模块名称与paths中的名称相同\n    define('moduleA', function() {})\n    // 导入\n    require.config({\n      paths: {\n        // 此处的模块名：moduleA\n        moduleA: 'assets/demo/moduleA'\n      }\n    })\n```\n\n5. 路径加载规则\n路径配置的优先级：1 通过 config 配置规则查找 2 通过 data-main 指定的路径查找 3 以引入 requirejs 的页面所在路径为准查找\n```\n    <!-- \n      设置data-main属性\n      1 data-main属性指定的文件也会同时被加载\n      2 用于指定查找其他模块的基础路径\n    -->\n    <script src=\"js/require.js\" data-main=\"js/main\"></script>\n```","source":"_posts/vue学习.md","raw":"---\ntitle: vue学习\ndate: 2019-05-29 09:20:46\ntags: JS\ncategories: JS\n---\n\n> 记录 Vue 的学习, Vue -渐进式JavaScript框架\n\n<!-- more -->\n\n## MVC 与 MVVM 的区别\nMVC 是指 Model View Controller（模型-视图-控制器），是一种 Web 架构的模式。\nMVVM 是指 Model-View-ViewModel，是一种基于前端开发的架构模式。\n在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 MVC模型关注的是Model的不变，所以，在MVC模型里，Model不依赖于View，但是 View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。\nMVVM在概念上是真正将页面与数据逻辑分离的模式，它把数据绑定工作放到一个JS里去实现，而这个JS文件的主要功能是完成数据的绑定，即把model绑定到UI的元素上。\n\n## Vue 实例\n<b>注意点：</b>\n1. 需要先在data中声明数据，再使用数据\n2. 可以通过 vm.$data 访问到data中的所有属性，或者 vm.msg\n\n## 双向数据绑定\n将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响。通过 getter 和 setter 来实现双向绑定\n\n## 动态添加数据的注意点\n只有 data 中的数据才是响应式的，动态添加进来的数据默认为非响应式\n可以通过以下方式实现动态添加数据的响应式\n1. Vue.set(object, key, value) - 适用于添加单个属性\n2. Object.assign() - 适用于添加多个属性\n\n## 异步 DOM 更新\n* 说明：Vue 异步执行 DOM 更新，监视所有数据改变，一次性更新DOM\n* 优势：可以去除重复数据，对于避免不必要的计算和避免重复 DOM 操作上，非常重要\n* 如果需要那到更新后 DOM 中的数据，则需要通过 Vue.nextTick(callback)：在DOM更新后，执行某个操作（属于DOM操作） 实例调用 vm.$nextTick(function () {})\n\n## Vue 指令\nVue 指令一般是带有 v- 前缀的特殊属性，当表达式的值改变是，将其产生的连带影响，响应式地作用于 DOM\n* v-text: 更新 DOM 对象的 textContent\n* v-html: 更新 DOM 对象的 innerHTML\n* v-bind: 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM\n* v-on: 绑定事件， 绑定的事件定义在 methods 中\n* 事件修饰符\n    * .stop 阻止冒泡，调用 event.stopPropagation()\n    * .prevent 阻止默认行为，调用 event.preventDefault()\n    * .capture 添加事件侦听器时使用事件捕获模式\n    * .self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件\n    * .once 事件只触发一次\n* v-model: 在表单元素上创建双向数据绑定，监听用户的输入事件以更新数据\n* v-for: 基于源数据多次渲染元素或模板块\n* key属性: 使用 v-for 的时候提供 key 属性，以获得性能提升。使用 key，Vue 会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。\n\n## 样式处理 -class 和 style\n使用方式：v-bind:class=\"expression\" or :class=\"expression\"， 表达式的类型：字符串、数组、对象（重点）\n\n* v-if 和 v-show\n    * v-if: 根据表达式的值的真假条件，销毁或重建元素\n    * v-show: 根据表达式之真假值，切换元素的 display CSS 属性\n\n* 提升性能: v-pre\nvue会跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译\n\n* 提升性能：v-once\nvue只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。\n\n## 过滤器 filter\n文本数据格式化\n* 全局过滤器\n通过全局方式创建的过滤器，在任何一个vue实例中都可以使用。使用全局过滤器的时候，需要先创建全局过滤器，再创建Vue实例。显示的内容由过滤器的返回值决定\n* 局部过滤器\n局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用\n\n## 按键值修饰符\n在监听键盘事件时，Vue 允许为 v-on 在监听键盘事件时添加关键修饰符。例如@keyup.13=\"submit\"\n\n## 监视数据变化 - watch\nwatch是一个对象，键是需要观察的表达式，值是对应回调函数，当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作\n\n## 实例生命周期\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象即可 (一些根实例特有的选项除外)。\n实例生命周期也叫做：组件生命周期\n\n### 生命周期介绍\n一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期\n生命周期钩子函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，这些事件，统称为组件的生命周期函数！\n注意：\n* Vue在执行过程中会自动调用生命周期钩子函数，我们只需要提供这些钩子函数即可\n* 钩子函数的名称都是Vue中规定好的！\n\n### 钩子函数 - beforeCreate()\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n注意：此时，无法获取 data中的数据、methods中的方法\n\n### 钩子函数 - created()\n注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据 [参考资料1](https://segmentfault.com/a/1190000008879966) [参考资料2](https://segmentfault.com/a/1190000008010666)\n\n### 钩子函数 - beforeMounted()\n在挂载开始之前被调用\n\n### 钩子函数 - mounted()\n此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作\n\n### 钩子函数 - beforeUpdated()\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n注意：此处获取的数据是更新后的数据，但是获取页面中的DOM元素是更新之前的\n\n### 钩子函数 - updated()\n组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n\n### 钩子函数 - beforeDestroy()\n实例销毁之前调用。在这一步，实例仍然完全可用。\n使用场景：实例销毁之前，执行清理任务，比如：清除定时器等\n\n### 钩子函数 - destroyed()\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n## axios\n* Promise based HTTP client for the browser and node.js\n    * 以Promise为基础的HTTP客户端，适用于：浏览器和node.js\n    * 封装ajax，用来发送请求，异步获取数据\n* 安装：npm i -S axios\n* 拦截器：拦截器会拦截发送的每一个请求，请求发送之前执行request中的函数，请求发送完成之后执行response中的函数\n\n## 自定义组件\n* 作用：进行DOM操作\n* 使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点\n* 两种指令：1 全局指令 2 局部指令\n\n## 组件\n> 组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树\n\n创建组件的两种方式：1 全局组件 2 局部组件\n\n### 全局组件\n* 说明：全局组件在所有的vue实例中都可以使用\n* 注意：先注册组件，再初始化根实例\n* extend：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\n\n### 局部组件\n局部组件，是在某一个具体的vue实例中定义的，只能在这个vue实例中使用\n\n### is特性\n> 在某些特定的标签中只能存在指定表恰 如ul > li 如果要浏览器正常解析则需要使用is\n\n## 组件通讯\n### 父组件到子组件\n通过子组件props属性来传递数据 props是一个数组, 传递过来的props属性的用法与data属性的用法相同\n注意：属性的值必须在组件中通过props属性显示指定，否则，不会生效\n\n### 子组件到父组件\n父组件给子组件传递一个函数，由子组件调用这个函数。借助vue中的自定义事件（v-on:cunstomFn=\"fn\"）\n步骤：\n1. 在父组件中定义方法 parentFn\n2. 在子组件 组件引入标签 中绑定自定义事件 v-on:自定义事件名=\"父组件中的方法\" ==> @pfn=\"parentFn\"\n3. 子组件中通过$emit()触发自定义事件事件 this.$emit(pfn,参数列表。。。)\n\n### 非父子组件通讯\n> 在简单的场景下，可以使用一个空的 Vue 实例作为事件总线\n$on()：绑定自定义事件\n\n### 内容分发\n通过<slot></slot> 标签指定内容展示区域\n\n### 获取组件（或元素） - refs\nvm.$refs 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）.在 HTML元素 中，添加ref属性，然后在JS中通过vm.$refs.属性来获取\n注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods\n\n## SPA -单页应用程序\n### SPA： Single Page Application\n> 单页Web应用（single page application，SPA），就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。\n\n* 单页面应用程序：只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中\n* 传统多页面应用程序：对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面\n优势:\n* 减少了请求体积，加快页面响应速度，降低了对服务器的压力\n* 更好的用户体验，让用户在web app感受native app的流畅\n实现思路和技术点\n1. ajax\n2. 锚点的使用（window.location.hash #）\n3. hashchange 事件 window.addEventListener(\"hashchange\",function () {})\n4. 监听锚点值变化的事件，根据不同的锚点值，请求相应的数据\n5. 原本用作页面内部进行跳转，定位并展示相应的内容\n\n### 路由\n路由即：浏览器中的哈希值（# hash）与展示视图内容（template）之间的对应规则\nvue中的路由是：hash 和 component的对应关系,在 Web app 中，通过一个页面来展示和管理整个应用的功能。SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容\n基本使用 安装：npm i -S vue-router\n重定向 { path: '/', redirect: '/home' }\n路由其他配置 \n* 路由导航高亮 当前匹配的导航链接，会自动添加router-link-exact-active router-link-active类\n* 匹配路由模式 配置：mode\n路由参数\n* 说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理\n* 语法：/user/:id\n* 使用：当匹配到一个路由时，参数值会被设置到 this.$route.params\n* 其他：可以通过 $route.query 获取到 URL 中的查询参数 等\n嵌套路由 - 子路由\n* 路由是可以嵌套的，即：路由中又包含子路由\n* 规则：父组件中包含 router-view，在路由规则中使用 children 配置\n\n## 前端模块化\n为什么需要模块化?\n1. 最开始的js就是为了实现客户端验证以及一些简单的效果\n2. 后来，js得到重视，应用越来越广泛，前端开发的复杂度越来越高\n3. 旧版本的js中没有提供与模块（module）相关的内容\n### 模块的概念\n* 在js中，一个模块就是实现特定功能的文件（js文件）\n* 遵循模块的机制，想要什么功能就加载什么模块\n* 模块化开发需要遵循规范\n\n### 模块化解决的问题\n1. 命名冲突\n2. 文件依赖（加载文件）\n3. 模块的复用\n4. 统一规范和开发方式\n\n### JS实现模块化的规范\nAMD 的使用\n> Asynchronous Module Definition：异步模块定义，浏览器端模块开发的规范 代表：require.js 特点：模块被异步加载，模块加载不影响后面语句的运行\n\n1. 定义模块\n```\n    // 语法:define(name, dependencies?, factory);\n    // name表示：当前模块的名称，是一个字符串 可有可无\n    // dependencies表示：当前模块的依赖项，是一个数组无论依赖一项还是多项 无则不写\n    // factory表示：当前模块要完成的一些功能，是一个函数\n    \n    // 定义对象模块\n    define({})\n    // 定义方法模块\n    define(function() {\n      return {}\n    })\n    // 定义带有依赖项的模块\n    define(['js/a'], function() {})\n```\n\n2. 加载模块\n```\n    // - 注意：require的第一个参数必须是数组\n\n    // 参数必须是数组 表示模块路径 以当前文件为基准,通过回调函数中的参数获取加载模块中的变量 参数与模块按照顺序一一对应\n    require(['a', 'js/b'], function(a, b) {\n      // 使用模块a 和 模块b 中的代码\n    })\n```\n\n3. 路径查找配置\n    * requirejs 默认使用 baseUrl+paths 的路径解析方式\n    * 可以使用以下方式避开此设置：1 以.js结尾 2 以 / 开始 3 包含协议：https:// 或 http://\n```\n    // 配置示例\n    // 注意配置应当在使用之前\n    require.config({\n      baseUrl: './js' // 配置基础路径为：当前目录下的js目录\n    })\n    require(['a'])    // 查找 基础路径下的 ./js/a.js\n\n    // 简化加载模块路径\n    require.config({\n      baseUrl: './js',\n      // 配置一次即可，直接通过路径名称（template || jquery）加载模块\n      paths: {\n        template: 'assets/artTemplate/template-native',\n        jquery: 'assets/jquery/jquery.min'\n      }\n    })\n    // 加载jquery template模块\n    require(['jquery', 'template'])\n```\n\n4. 非模块化和依赖项支持\n    * 添加模块的依赖模块，保证加载顺序（deps）\n    * 将非模块化模块，转化为模块化（exports）\n```\n    // 示例\n    require.config({\n      baseUrl: './js',\n      paths: {\n        // 配置路径\n        noModule: 'assets/demo/noModule'\n      },\n      // 配置不符合规范的模块项\n      shim: {\n        // 模块名称\n        noModule: {\n          deps: [],         // 依赖项\n          exports: 'sayHi'  // 导出模块中存在的函数或变量\n        }\n      }\n    });\n\n    // 注意点  如果定义模块的时候，指定了模块名称，需要使用该名称来引用模块\n    // 定义 这个模块名称与paths中的名称相同\n    define('moduleA', function() {})\n    // 导入\n    require.config({\n      paths: {\n        // 此处的模块名：moduleA\n        moduleA: 'assets/demo/moduleA'\n      }\n    })\n```\n\n5. 路径加载规则\n路径配置的优先级：1 通过 config 配置规则查找 2 通过 data-main 指定的路径查找 3 以引入 requirejs 的页面所在路径为准查找\n```\n    <!-- \n      设置data-main属性\n      1 data-main属性指定的文件也会同时被加载\n      2 用于指定查找其他模块的基础路径\n    -->\n    <script src=\"js/require.js\" data-main=\"js/main\"></script>\n```","slug":"vue学习","published":1,"updated":"2019-05-31T05:26:37.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwbncfc600139oqnz7xxudqo","content":"<blockquote>\n<p>记录 Vue 的学习, Vue -渐进式JavaScript框架</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"MVC-与-MVVM-的区别\"><a href=\"#MVC-与-MVVM-的区别\" class=\"headerlink\" title=\"MVC 与 MVVM 的区别\"></a>MVC 与 MVVM 的区别</h2><p>MVC 是指 Model View Controller（模型-视图-控制器），是一种 Web 架构的模式。<br>MVVM 是指 Model-View-ViewModel，是一种基于前端开发的架构模式。<br>在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 MVC模型关注的是Model的不变，所以，在MVC模型里，Model不依赖于View，但是 View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。<br>MVVM在概念上是真正将页面与数据逻辑分离的模式，它把数据绑定工作放到一个JS里去实现，而这个JS文件的主要功能是完成数据的绑定，即把model绑定到UI的元素上。</p>\n<h2 id=\"Vue-实例\"><a href=\"#Vue-实例\" class=\"headerlink\" title=\"Vue 实例\"></a>Vue 实例</h2><p><b>注意点：</b></p>\n<ol>\n<li>需要先在data中声明数据，再使用数据</li>\n<li>可以通过 vm.$data 访问到data中的所有属性，或者 vm.msg</li>\n</ol>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><p>将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响。通过 getter 和 setter 来实现双向绑定</p>\n<h2 id=\"动态添加数据的注意点\"><a href=\"#动态添加数据的注意点\" class=\"headerlink\" title=\"动态添加数据的注意点\"></a>动态添加数据的注意点</h2><p>只有 data 中的数据才是响应式的，动态添加进来的数据默认为非响应式<br>可以通过以下方式实现动态添加数据的响应式</p>\n<ol>\n<li>Vue.set(object, key, value) - 适用于添加单个属性</li>\n<li>Object.assign() - 适用于添加多个属性</li>\n</ol>\n<h2 id=\"异步-DOM-更新\"><a href=\"#异步-DOM-更新\" class=\"headerlink\" title=\"异步 DOM 更新\"></a>异步 DOM 更新</h2><ul>\n<li>说明：Vue 异步执行 DOM 更新，监视所有数据改变，一次性更新DOM</li>\n<li>优势：可以去除重复数据，对于避免不必要的计算和避免重复 DOM 操作上，非常重要</li>\n<li>如果需要那到更新后 DOM 中的数据，则需要通过 Vue.nextTick(callback)：在DOM更新后，执行某个操作（属于DOM操作） 实例调用 vm.$nextTick(function () {})</li>\n</ul>\n<h2 id=\"Vue-指令\"><a href=\"#Vue-指令\" class=\"headerlink\" title=\"Vue 指令\"></a>Vue 指令</h2><p>Vue 指令一般是带有 v- 前缀的特殊属性，当表达式的值改变是，将其产生的连带影响，响应式地作用于 DOM</p>\n<ul>\n<li>v-text: 更新 DOM 对象的 textContent</li>\n<li>v-html: 更新 DOM 对象的 innerHTML</li>\n<li>v-bind: 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li>\n<li>v-on: 绑定事件， 绑定的事件定义在 methods 中</li>\n<li>事件修饰符<ul>\n<li>.stop 阻止冒泡，调用 event.stopPropagation()</li>\n<li>.prevent 阻止默认行为，调用 event.preventDefault()</li>\n<li>.capture 添加事件侦听器时使用事件捕获模式</li>\n<li>.self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件</li>\n<li>.once 事件只触发一次</li>\n</ul>\n</li>\n<li>v-model: 在表单元素上创建双向数据绑定，监听用户的输入事件以更新数据</li>\n<li>v-for: 基于源数据多次渲染元素或模板块</li>\n<li>key属性: 使用 v-for 的时候提供 key 属性，以获得性能提升。使用 key，Vue 会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li>\n</ul>\n<h2 id=\"样式处理-class-和-style\"><a href=\"#样式处理-class-和-style\" class=\"headerlink\" title=\"样式处理 -class 和 style\"></a>样式处理 -class 和 style</h2><p>使用方式：v-bind:class=”expression” or :class=”expression”， 表达式的类型：字符串、数组、对象（重点）</p>\n<ul>\n<li><p>v-if 和 v-show</p>\n<ul>\n<li>v-if: 根据表达式的值的真假条件，销毁或重建元素</li>\n<li>v-show: 根据表达式之真假值，切换元素的 display CSS 属性</li>\n</ul>\n</li>\n<li><p>提升性能: v-pre<br>vue会跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译</p>\n</li>\n<li><p>提升性能：v-once<br>vue只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p>\n</li>\n</ul>\n<h2 id=\"过滤器-filter\"><a href=\"#过滤器-filter\" class=\"headerlink\" title=\"过滤器 filter\"></a>过滤器 filter</h2><p>文本数据格式化</p>\n<ul>\n<li>全局过滤器<br>通过全局方式创建的过滤器，在任何一个vue实例中都可以使用。使用全局过滤器的时候，需要先创建全局过滤器，再创建Vue实例。显示的内容由过滤器的返回值决定</li>\n<li>局部过滤器<br>局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用</li>\n</ul>\n<h2 id=\"按键值修饰符\"><a href=\"#按键值修饰符\" class=\"headerlink\" title=\"按键值修饰符\"></a>按键值修饰符</h2><p>在监听键盘事件时，Vue 允许为 v-on 在监听键盘事件时添加关键修饰符。例如@keyup.13=”submit”</p>\n<h2 id=\"监视数据变化-watch\"><a href=\"#监视数据变化-watch\" class=\"headerlink\" title=\"监视数据变化 - watch\"></a>监视数据变化 - watch</h2><p>watch是一个对象，键是需要观察的表达式，值是对应回调函数，当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作</p>\n<h2 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h2><p>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象即可 (一些根实例特有的选项除外)。<br>实例生命周期也叫做：组件生命周期</p>\n<h3 id=\"生命周期介绍\"><a href=\"#生命周期介绍\" class=\"headerlink\" title=\"生命周期介绍\"></a>生命周期介绍</h3><p>一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期<br>生命周期钩子函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，这些事件，统称为组件的生命周期函数！<br>注意：</p>\n<ul>\n<li>Vue在执行过程中会自动调用生命周期钩子函数，我们只需要提供这些钩子函数即可</li>\n<li>钩子函数的名称都是Vue中规定好的！</li>\n</ul>\n<h3 id=\"钩子函数-beforeCreate\"><a href=\"#钩子函数-beforeCreate\" class=\"headerlink\" title=\"钩子函数 - beforeCreate()\"></a>钩子函数 - beforeCreate()</h3><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用<br>注意：此时，无法获取 data中的数据、methods中的方法</p>\n<h3 id=\"钩子函数-created\"><a href=\"#钩子函数-created\" class=\"headerlink\" title=\"钩子函数 - created()\"></a>钩子函数 - created()</h3><p>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据 <a href=\"https://segmentfault.com/a/1190000008879966\" target=\"_blank\" rel=\"noopener\">参考资料1</a> <a href=\"https://segmentfault.com/a/1190000008010666\" target=\"_blank\" rel=\"noopener\">参考资料2</a></p>\n<h3 id=\"钩子函数-beforeMounted\"><a href=\"#钩子函数-beforeMounted\" class=\"headerlink\" title=\"钩子函数 - beforeMounted()\"></a>钩子函数 - beforeMounted()</h3><p>在挂载开始之前被调用</p>\n<h3 id=\"钩子函数-mounted\"><a href=\"#钩子函数-mounted\" class=\"headerlink\" title=\"钩子函数 - mounted()\"></a>钩子函数 - mounted()</h3><p>此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</p>\n<h3 id=\"钩子函数-beforeUpdated\"><a href=\"#钩子函数-beforeUpdated\" class=\"headerlink\" title=\"钩子函数 - beforeUpdated()\"></a>钩子函数 - beforeUpdated()</h3><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。<br>注意：此处获取的数据是更新后的数据，但是获取页面中的DOM元素是更新之前的</p>\n<h3 id=\"钩子函数-updated\"><a href=\"#钩子函数-updated\" class=\"headerlink\" title=\"钩子函数 - updated()\"></a>钩子函数 - updated()</h3><p>组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>\n<h3 id=\"钩子函数-beforeDestroy\"><a href=\"#钩子函数-beforeDestroy\" class=\"headerlink\" title=\"钩子函数 - beforeDestroy()\"></a>钩子函数 - beforeDestroy()</h3><p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</p>\n<h3 id=\"钩子函数-destroyed\"><a href=\"#钩子函数-destroyed\" class=\"headerlink\" title=\"钩子函数 - destroyed()\"></a>钩子函数 - destroyed()</h3><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n<h2 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h2><ul>\n<li>Promise based HTTP client for the browser and node.js<ul>\n<li>以Promise为基础的HTTP客户端，适用于：浏览器和node.js</li>\n<li>封装ajax，用来发送请求，异步获取数据</li>\n</ul>\n</li>\n<li>安装：npm i -S axios</li>\n<li>拦截器：拦截器会拦截发送的每一个请求，请求发送之前执行request中的函数，请求发送完成之后执行response中的函数</li>\n</ul>\n<h2 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h2><ul>\n<li>作用：进行DOM操作</li>\n<li>使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点</li>\n<li>两种指令：1 全局指令 2 局部指令</li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><blockquote>\n<p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树</p>\n</blockquote>\n<p>创建组件的两种方式：1 全局组件 2 局部组件</p>\n<h3 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h3><ul>\n<li>说明：全局组件在所有的vue实例中都可以使用</li>\n<li>注意：先注册组件，再初始化根实例</li>\n<li>extend：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li>\n</ul>\n<h3 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h3><p>局部组件，是在某一个具体的vue实例中定义的，只能在这个vue实例中使用</p>\n<h3 id=\"is特性\"><a href=\"#is特性\" class=\"headerlink\" title=\"is特性\"></a>is特性</h3><blockquote>\n<p>在某些特定的标签中只能存在指定表恰 如ul &gt; li 如果要浏览器正常解析则需要使用is</p>\n</blockquote>\n<h2 id=\"组件通讯\"><a href=\"#组件通讯\" class=\"headerlink\" title=\"组件通讯\"></a>组件通讯</h2><h3 id=\"父组件到子组件\"><a href=\"#父组件到子组件\" class=\"headerlink\" title=\"父组件到子组件\"></a>父组件到子组件</h3><p>通过子组件props属性来传递数据 props是一个数组, 传递过来的props属性的用法与data属性的用法相同<br>注意：属性的值必须在组件中通过props属性显示指定，否则，不会生效</p>\n<h3 id=\"子组件到父组件\"><a href=\"#子组件到父组件\" class=\"headerlink\" title=\"子组件到父组件\"></a>子组件到父组件</h3><p>父组件给子组件传递一个函数，由子组件调用这个函数。借助vue中的自定义事件（v-on:cunstomFn=”fn”）<br>步骤：</p>\n<ol>\n<li>在父组件中定义方法 parentFn</li>\n<li>在子组件 组件引入标签 中绑定自定义事件 v-on:自定义事件名=”父组件中的方法” ==&gt; @pfn=”parentFn”</li>\n<li>子组件中通过$emit()触发自定义事件事件 this.$emit(pfn,参数列表。。。)</li>\n</ol>\n<h3 id=\"非父子组件通讯\"><a href=\"#非父子组件通讯\" class=\"headerlink\" title=\"非父子组件通讯\"></a>非父子组件通讯</h3><blockquote>\n<p>在简单的场景下，可以使用一个空的 Vue 实例作为事件总线<br>$on()：绑定自定义事件</p>\n</blockquote>\n<h3 id=\"内容分发\"><a href=\"#内容分发\" class=\"headerlink\" title=\"内容分发\"></a>内容分发</h3><p>通过<slot></slot> 标签指定内容展示区域</p>\n<h3 id=\"获取组件（或元素）-refs\"><a href=\"#获取组件（或元素）-refs\" class=\"headerlink\" title=\"获取组件（或元素） - refs\"></a>获取组件（或元素） - refs</h3><p>vm.$refs 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）.在 HTML元素 中，添加ref属性，然后在JS中通过vm.$refs.属性来获取<br>注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods</p>\n<h2 id=\"SPA-单页应用程序\"><a href=\"#SPA-单页应用程序\" class=\"headerlink\" title=\"SPA -单页应用程序\"></a>SPA -单页应用程序</h2><h3 id=\"SPA：-Single-Page-Application\"><a href=\"#SPA：-Single-Page-Application\" class=\"headerlink\" title=\"SPA： Single Page Application\"></a>SPA： Single Page Application</h3><blockquote>\n<p>单页Web应用（single page application，SPA），就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</p>\n</blockquote>\n<ul>\n<li>单页面应用程序：只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中</li>\n<li>传统多页面应用程序：对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面<br>优势:</li>\n<li>减少了请求体积，加快页面响应速度，降低了对服务器的压力</li>\n<li>更好的用户体验，让用户在web app感受native app的流畅<br>实现思路和技术点</li>\n</ul>\n<ol>\n<li>ajax</li>\n<li>锚点的使用（window.location.hash #）</li>\n<li>hashchange 事件 window.addEventListener(“hashchange”,function () {})</li>\n<li>监听锚点值变化的事件，根据不同的锚点值，请求相应的数据</li>\n<li>原本用作页面内部进行跳转，定位并展示相应的内容</li>\n</ol>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>路由即：浏览器中的哈希值（# hash）与展示视图内容（template）之间的对应规则<br>vue中的路由是：hash 和 component的对应关系,在 Web app 中，通过一个页面来展示和管理整个应用的功能。SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容<br>基本使用 安装：npm i -S vue-router<br>重定向 { path: ‘/‘, redirect: ‘/home’ }<br>路由其他配置 </p>\n<ul>\n<li>路由导航高亮 当前匹配的导航链接，会自动添加router-link-exact-active router-link-active类</li>\n<li>匹配路由模式 配置：mode<br>路由参数</li>\n<li>说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理</li>\n<li>语法：/user/:id</li>\n<li>使用：当匹配到一个路由时，参数值会被设置到 this.$route.params</li>\n<li>其他：可以通过 $route.query 获取到 URL 中的查询参数 等<br>嵌套路由 - 子路由</li>\n<li>路由是可以嵌套的，即：路由中又包含子路由</li>\n<li>规则：父组件中包含 router-view，在路由规则中使用 children 配置</li>\n</ul>\n<h2 id=\"前端模块化\"><a href=\"#前端模块化\" class=\"headerlink\" title=\"前端模块化\"></a>前端模块化</h2><p>为什么需要模块化?</p>\n<ol>\n<li>最开始的js就是为了实现客户端验证以及一些简单的效果</li>\n<li>后来，js得到重视，应用越来越广泛，前端开发的复杂度越来越高</li>\n<li>旧版本的js中没有提供与模块（module）相关的内容<h3 id=\"模块的概念\"><a href=\"#模块的概念\" class=\"headerlink\" title=\"模块的概念\"></a>模块的概念</h3></li>\n</ol>\n<ul>\n<li>在js中，一个模块就是实现特定功能的文件（js文件）</li>\n<li>遵循模块的机制，想要什么功能就加载什么模块</li>\n<li>模块化开发需要遵循规范</li>\n</ul>\n<h3 id=\"模块化解决的问题\"><a href=\"#模块化解决的问题\" class=\"headerlink\" title=\"模块化解决的问题\"></a>模块化解决的问题</h3><ol>\n<li>命名冲突</li>\n<li>文件依赖（加载文件）</li>\n<li>模块的复用</li>\n<li>统一规范和开发方式</li>\n</ol>\n<h3 id=\"JS实现模块化的规范\"><a href=\"#JS实现模块化的规范\" class=\"headerlink\" title=\"JS实现模块化的规范\"></a>JS实现模块化的规范</h3><p>AMD 的使用</p>\n<blockquote>\n<p>Asynchronous Module Definition：异步模块定义，浏览器端模块开发的规范 代表：require.js 特点：模块被异步加载，模块加载不影响后面语句的运行</p>\n</blockquote>\n<ol>\n<li><p>定义模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法:define(name, dependencies?, factory);</span><br><span class=\"line\">// name表示：当前模块的名称，是一个字符串 可有可无</span><br><span class=\"line\">// dependencies表示：当前模块的依赖项，是一个数组无论依赖一项还是多项 无则不写</span><br><span class=\"line\">// factory表示：当前模块要完成的一些功能，是一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义对象模块</span><br><span class=\"line\">define(&#123;&#125;)</span><br><span class=\"line\">// 定义方法模块</span><br><span class=\"line\">define(function() &#123;</span><br><span class=\"line\">  return &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 定义带有依赖项的模块</span><br><span class=\"line\">define([&apos;js/a&apos;], function() &#123;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// - 注意：require的第一个参数必须是数组</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数必须是数组 表示模块路径 以当前文件为基准,通过回调函数中的参数获取加载模块中的变量 参数与模块按照顺序一一对应</span><br><span class=\"line\">require([&apos;a&apos;, &apos;js/b&apos;], function(a, b) &#123;</span><br><span class=\"line\">  // 使用模块a 和 模块b 中的代码</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路径查找配置</p>\n<ul>\n<li>requirejs 默认使用 baseUrl+paths 的路径解析方式</li>\n<li>可以使用以下方式避开此设置：1 以.js结尾 2 以 / 开始 3 包含协议：https:// 或 http://<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 配置示例</span><br><span class=\"line\">// 注意配置应当在使用之前</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos; // 配置基础路径为：当前目录下的js目录</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">require([&apos;a&apos;])    // 查找 基础路径下的 ./js/a.js</span><br><span class=\"line\"></span><br><span class=\"line\">// 简化加载模块路径</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos;,</span><br><span class=\"line\">  // 配置一次即可，直接通过路径名称（template || jquery）加载模块</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    template: &apos;assets/artTemplate/template-native&apos;,</span><br><span class=\"line\">    jquery: &apos;assets/jquery/jquery.min&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 加载jquery template模块</span><br><span class=\"line\">require([&apos;jquery&apos;, &apos;template&apos;])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>非模块化和依赖项支持</p>\n<ul>\n<li>添加模块的依赖模块，保证加载顺序（deps）</li>\n<li>将非模块化模块，转化为模块化（exports）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos;,</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    // 配置路径</span><br><span class=\"line\">    noModule: &apos;assets/demo/noModule&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置不符合规范的模块项</span><br><span class=\"line\">  shim: &#123;</span><br><span class=\"line\">    // 模块名称</span><br><span class=\"line\">    noModule: &#123;</span><br><span class=\"line\">      deps: [],         // 依赖项</span><br><span class=\"line\">      exports: &apos;sayHi&apos;  // 导出模块中存在的函数或变量</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 注意点  如果定义模块的时候，指定了模块名称，需要使用该名称来引用模块</span><br><span class=\"line\">// 定义 这个模块名称与paths中的名称相同</span><br><span class=\"line\">define(&apos;moduleA&apos;, function() &#123;&#125;)</span><br><span class=\"line\">// 导入</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    // 此处的模块名：moduleA</span><br><span class=\"line\">    moduleA: &apos;assets/demo/moduleA&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>路径加载规则<br>路径配置的优先级：1 通过 config 配置规则查找 2 通过 data-main 指定的路径查找 3 以引入 requirejs 的页面所在路径为准查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- </span><br><span class=\"line\">  设置data-main属性</span><br><span class=\"line\">  1 data-main属性指定的文件也会同时被加载</span><br><span class=\"line\">  2 用于指定查找其他模块的基础路径</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"melody":{"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories"},"favicon":"/img/my-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"darker","social":{"github":"https://github.com/daialihexiaoniu"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/img/avatar.jpg","top_img":"/img/sky.jpg","post_meta":{"date_type":"updated","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2018,"footer_custom_text":"QQ：397698632  微信：lxl_cwy","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"rootConfig":{"title":"陆阿狸的博客","subtitle":null,"description":null,"author":"陆阿狸","language":"zh-Hans","timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:daialihexiaoniu/daialihexiaoniu.github.io.git"},"ignore":[],"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"server":{"port":4000,"log":false,"ip":"0.0.0.0","compress":false,"header":true},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"index_generator":{"per_page":10,"order_by":"-date"}}}}},"excerpt":"<blockquote>\n<p>记录 Vue 的学习, Vue -渐进式JavaScript框架</p>\n</blockquote>","more":"<h2 id=\"MVC-与-MVVM-的区别\"><a href=\"#MVC-与-MVVM-的区别\" class=\"headerlink\" title=\"MVC 与 MVVM 的区别\"></a>MVC 与 MVVM 的区别</h2><p>MVC 是指 Model View Controller（模型-视图-控制器），是一种 Web 架构的模式。<br>MVVM 是指 Model-View-ViewModel，是一种基于前端开发的架构模式。<br>在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 MVC模型关注的是Model的不变，所以，在MVC模型里，Model不依赖于View，但是 View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。<br>MVVM在概念上是真正将页面与数据逻辑分离的模式，它把数据绑定工作放到一个JS里去实现，而这个JS文件的主要功能是完成数据的绑定，即把model绑定到UI的元素上。</p>\n<h2 id=\"Vue-实例\"><a href=\"#Vue-实例\" class=\"headerlink\" title=\"Vue 实例\"></a>Vue 实例</h2><p><b>注意点：</b></p>\n<ol>\n<li>需要先在data中声明数据，再使用数据</li>\n<li>可以通过 vm.$data 访问到data中的所有属性，或者 vm.msg</li>\n</ol>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><p>将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响。通过 getter 和 setter 来实现双向绑定</p>\n<h2 id=\"动态添加数据的注意点\"><a href=\"#动态添加数据的注意点\" class=\"headerlink\" title=\"动态添加数据的注意点\"></a>动态添加数据的注意点</h2><p>只有 data 中的数据才是响应式的，动态添加进来的数据默认为非响应式<br>可以通过以下方式实现动态添加数据的响应式</p>\n<ol>\n<li>Vue.set(object, key, value) - 适用于添加单个属性</li>\n<li>Object.assign() - 适用于添加多个属性</li>\n</ol>\n<h2 id=\"异步-DOM-更新\"><a href=\"#异步-DOM-更新\" class=\"headerlink\" title=\"异步 DOM 更新\"></a>异步 DOM 更新</h2><ul>\n<li>说明：Vue 异步执行 DOM 更新，监视所有数据改变，一次性更新DOM</li>\n<li>优势：可以去除重复数据，对于避免不必要的计算和避免重复 DOM 操作上，非常重要</li>\n<li>如果需要那到更新后 DOM 中的数据，则需要通过 Vue.nextTick(callback)：在DOM更新后，执行某个操作（属于DOM操作） 实例调用 vm.$nextTick(function () {})</li>\n</ul>\n<h2 id=\"Vue-指令\"><a href=\"#Vue-指令\" class=\"headerlink\" title=\"Vue 指令\"></a>Vue 指令</h2><p>Vue 指令一般是带有 v- 前缀的特殊属性，当表达式的值改变是，将其产生的连带影响，响应式地作用于 DOM</p>\n<ul>\n<li>v-text: 更新 DOM 对象的 textContent</li>\n<li>v-html: 更新 DOM 对象的 innerHTML</li>\n<li>v-bind: 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</li>\n<li>v-on: 绑定事件， 绑定的事件定义在 methods 中</li>\n<li>事件修饰符<ul>\n<li>.stop 阻止冒泡，调用 event.stopPropagation()</li>\n<li>.prevent 阻止默认行为，调用 event.preventDefault()</li>\n<li>.capture 添加事件侦听器时使用事件捕获模式</li>\n<li>.self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件</li>\n<li>.once 事件只触发一次</li>\n</ul>\n</li>\n<li>v-model: 在表单元素上创建双向数据绑定，监听用户的输入事件以更新数据</li>\n<li>v-for: 基于源数据多次渲染元素或模板块</li>\n<li>key属性: 使用 v-for 的时候提供 key 属性，以获得性能提升。使用 key，Vue 会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li>\n</ul>\n<h2 id=\"样式处理-class-和-style\"><a href=\"#样式处理-class-和-style\" class=\"headerlink\" title=\"样式处理 -class 和 style\"></a>样式处理 -class 和 style</h2><p>使用方式：v-bind:class=”expression” or :class=”expression”， 表达式的类型：字符串、数组、对象（重点）</p>\n<ul>\n<li><p>v-if 和 v-show</p>\n<ul>\n<li>v-if: 根据表达式的值的真假条件，销毁或重建元素</li>\n<li>v-show: 根据表达式之真假值，切换元素的 display CSS 属性</li>\n</ul>\n</li>\n<li><p>提升性能: v-pre<br>vue会跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译</p>\n</li>\n<li><p>提升性能：v-once<br>vue只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p>\n</li>\n</ul>\n<h2 id=\"过滤器-filter\"><a href=\"#过滤器-filter\" class=\"headerlink\" title=\"过滤器 filter\"></a>过滤器 filter</h2><p>文本数据格式化</p>\n<ul>\n<li>全局过滤器<br>通过全局方式创建的过滤器，在任何一个vue实例中都可以使用。使用全局过滤器的时候，需要先创建全局过滤器，再创建Vue实例。显示的内容由过滤器的返回值决定</li>\n<li>局部过滤器<br>局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用</li>\n</ul>\n<h2 id=\"按键值修饰符\"><a href=\"#按键值修饰符\" class=\"headerlink\" title=\"按键值修饰符\"></a>按键值修饰符</h2><p>在监听键盘事件时，Vue 允许为 v-on 在监听键盘事件时添加关键修饰符。例如@keyup.13=”submit”</p>\n<h2 id=\"监视数据变化-watch\"><a href=\"#监视数据变化-watch\" class=\"headerlink\" title=\"监视数据变化 - watch\"></a>监视数据变化 - watch</h2><p>watch是一个对象，键是需要观察的表达式，值是对应回调函数，当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作</p>\n<h2 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h2><p>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象即可 (一些根实例特有的选项除外)。<br>实例生命周期也叫做：组件生命周期</p>\n<h3 id=\"生命周期介绍\"><a href=\"#生命周期介绍\" class=\"headerlink\" title=\"生命周期介绍\"></a>生命周期介绍</h3><p>一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期<br>生命周期钩子函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，这些事件，统称为组件的生命周期函数！<br>注意：</p>\n<ul>\n<li>Vue在执行过程中会自动调用生命周期钩子函数，我们只需要提供这些钩子函数即可</li>\n<li>钩子函数的名称都是Vue中规定好的！</li>\n</ul>\n<h3 id=\"钩子函数-beforeCreate\"><a href=\"#钩子函数-beforeCreate\" class=\"headerlink\" title=\"钩子函数 - beforeCreate()\"></a>钩子函数 - beforeCreate()</h3><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用<br>注意：此时，无法获取 data中的数据、methods中的方法</p>\n<h3 id=\"钩子函数-created\"><a href=\"#钩子函数-created\" class=\"headerlink\" title=\"钩子函数 - created()\"></a>钩子函数 - created()</h3><p>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据 <a href=\"https://segmentfault.com/a/1190000008879966\" target=\"_blank\" rel=\"noopener\">参考资料1</a> <a href=\"https://segmentfault.com/a/1190000008010666\" target=\"_blank\" rel=\"noopener\">参考资料2</a></p>\n<h3 id=\"钩子函数-beforeMounted\"><a href=\"#钩子函数-beforeMounted\" class=\"headerlink\" title=\"钩子函数 - beforeMounted()\"></a>钩子函数 - beforeMounted()</h3><p>在挂载开始之前被调用</p>\n<h3 id=\"钩子函数-mounted\"><a href=\"#钩子函数-mounted\" class=\"headerlink\" title=\"钩子函数 - mounted()\"></a>钩子函数 - mounted()</h3><p>此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</p>\n<h3 id=\"钩子函数-beforeUpdated\"><a href=\"#钩子函数-beforeUpdated\" class=\"headerlink\" title=\"钩子函数 - beforeUpdated()\"></a>钩子函数 - beforeUpdated()</h3><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。<br>注意：此处获取的数据是更新后的数据，但是获取页面中的DOM元素是更新之前的</p>\n<h3 id=\"钩子函数-updated\"><a href=\"#钩子函数-updated\" class=\"headerlink\" title=\"钩子函数 - updated()\"></a>钩子函数 - updated()</h3><p>组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>\n<h3 id=\"钩子函数-beforeDestroy\"><a href=\"#钩子函数-beforeDestroy\" class=\"headerlink\" title=\"钩子函数 - beforeDestroy()\"></a>钩子函数 - beforeDestroy()</h3><p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</p>\n<h3 id=\"钩子函数-destroyed\"><a href=\"#钩子函数-destroyed\" class=\"headerlink\" title=\"钩子函数 - destroyed()\"></a>钩子函数 - destroyed()</h3><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n<h2 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h2><ul>\n<li>Promise based HTTP client for the browser and node.js<ul>\n<li>以Promise为基础的HTTP客户端，适用于：浏览器和node.js</li>\n<li>封装ajax，用来发送请求，异步获取数据</li>\n</ul>\n</li>\n<li>安装：npm i -S axios</li>\n<li>拦截器：拦截器会拦截发送的每一个请求，请求发送之前执行request中的函数，请求发送完成之后执行response中的函数</li>\n</ul>\n<h2 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h2><ul>\n<li>作用：进行DOM操作</li>\n<li>使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点</li>\n<li>两种指令：1 全局指令 2 局部指令</li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><blockquote>\n<p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树</p>\n</blockquote>\n<p>创建组件的两种方式：1 全局组件 2 局部组件</p>\n<h3 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h3><ul>\n<li>说明：全局组件在所有的vue实例中都可以使用</li>\n<li>注意：先注册组件，再初始化根实例</li>\n<li>extend：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li>\n</ul>\n<h3 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h3><p>局部组件，是在某一个具体的vue实例中定义的，只能在这个vue实例中使用</p>\n<h3 id=\"is特性\"><a href=\"#is特性\" class=\"headerlink\" title=\"is特性\"></a>is特性</h3><blockquote>\n<p>在某些特定的标签中只能存在指定表恰 如ul &gt; li 如果要浏览器正常解析则需要使用is</p>\n</blockquote>\n<h2 id=\"组件通讯\"><a href=\"#组件通讯\" class=\"headerlink\" title=\"组件通讯\"></a>组件通讯</h2><h3 id=\"父组件到子组件\"><a href=\"#父组件到子组件\" class=\"headerlink\" title=\"父组件到子组件\"></a>父组件到子组件</h3><p>通过子组件props属性来传递数据 props是一个数组, 传递过来的props属性的用法与data属性的用法相同<br>注意：属性的值必须在组件中通过props属性显示指定，否则，不会生效</p>\n<h3 id=\"子组件到父组件\"><a href=\"#子组件到父组件\" class=\"headerlink\" title=\"子组件到父组件\"></a>子组件到父组件</h3><p>父组件给子组件传递一个函数，由子组件调用这个函数。借助vue中的自定义事件（v-on:cunstomFn=”fn”）<br>步骤：</p>\n<ol>\n<li>在父组件中定义方法 parentFn</li>\n<li>在子组件 组件引入标签 中绑定自定义事件 v-on:自定义事件名=”父组件中的方法” ==&gt; @pfn=”parentFn”</li>\n<li>子组件中通过$emit()触发自定义事件事件 this.$emit(pfn,参数列表。。。)</li>\n</ol>\n<h3 id=\"非父子组件通讯\"><a href=\"#非父子组件通讯\" class=\"headerlink\" title=\"非父子组件通讯\"></a>非父子组件通讯</h3><blockquote>\n<p>在简单的场景下，可以使用一个空的 Vue 实例作为事件总线<br>$on()：绑定自定义事件</p>\n</blockquote>\n<h3 id=\"内容分发\"><a href=\"#内容分发\" class=\"headerlink\" title=\"内容分发\"></a>内容分发</h3><p>通过<slot></slot> 标签指定内容展示区域</p>\n<h3 id=\"获取组件（或元素）-refs\"><a href=\"#获取组件（或元素）-refs\" class=\"headerlink\" title=\"获取组件（或元素） - refs\"></a>获取组件（或元素） - refs</h3><p>vm.$refs 一个对象，持有已注册过 ref 的所有子组件（或HTML元素）.在 HTML元素 中，添加ref属性，然后在JS中通过vm.$refs.属性来获取<br>注意：如果获取的是一个子组件，那么通过ref就能获取到子组件中的data和methods</p>\n<h2 id=\"SPA-单页应用程序\"><a href=\"#SPA-单页应用程序\" class=\"headerlink\" title=\"SPA -单页应用程序\"></a>SPA -单页应用程序</h2><h3 id=\"SPA：-Single-Page-Application\"><a href=\"#SPA：-Single-Page-Application\" class=\"headerlink\" title=\"SPA： Single Page Application\"></a>SPA： Single Page Application</h3><blockquote>\n<p>单页Web应用（single page application，SPA），就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</p>\n</blockquote>\n<ul>\n<li>单页面应用程序：只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中</li>\n<li>传统多页面应用程序：对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面<br>优势:</li>\n<li>减少了请求体积，加快页面响应速度，降低了对服务器的压力</li>\n<li>更好的用户体验，让用户在web app感受native app的流畅<br>实现思路和技术点</li>\n</ul>\n<ol>\n<li>ajax</li>\n<li>锚点的使用（window.location.hash #）</li>\n<li>hashchange 事件 window.addEventListener(“hashchange”,function () {})</li>\n<li>监听锚点值变化的事件，根据不同的锚点值，请求相应的数据</li>\n<li>原本用作页面内部进行跳转，定位并展示相应的内容</li>\n</ol>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>路由即：浏览器中的哈希值（# hash）与展示视图内容（template）之间的对应规则<br>vue中的路由是：hash 和 component的对应关系,在 Web app 中，通过一个页面来展示和管理整个应用的功能。SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由 应运而生！简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容<br>基本使用 安装：npm i -S vue-router<br>重定向 { path: ‘/‘, redirect: ‘/home’ }<br>路由其他配置 </p>\n<ul>\n<li>路由导航高亮 当前匹配的导航链接，会自动添加router-link-exact-active router-link-active类</li>\n<li>匹配路由模式 配置：mode<br>路由参数</li>\n<li>说明：我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理</li>\n<li>语法：/user/:id</li>\n<li>使用：当匹配到一个路由时，参数值会被设置到 this.$route.params</li>\n<li>其他：可以通过 $route.query 获取到 URL 中的查询参数 等<br>嵌套路由 - 子路由</li>\n<li>路由是可以嵌套的，即：路由中又包含子路由</li>\n<li>规则：父组件中包含 router-view，在路由规则中使用 children 配置</li>\n</ul>\n<h2 id=\"前端模块化\"><a href=\"#前端模块化\" class=\"headerlink\" title=\"前端模块化\"></a>前端模块化</h2><p>为什么需要模块化?</p>\n<ol>\n<li>最开始的js就是为了实现客户端验证以及一些简单的效果</li>\n<li>后来，js得到重视，应用越来越广泛，前端开发的复杂度越来越高</li>\n<li>旧版本的js中没有提供与模块（module）相关的内容<h3 id=\"模块的概念\"><a href=\"#模块的概念\" class=\"headerlink\" title=\"模块的概念\"></a>模块的概念</h3></li>\n</ol>\n<ul>\n<li>在js中，一个模块就是实现特定功能的文件（js文件）</li>\n<li>遵循模块的机制，想要什么功能就加载什么模块</li>\n<li>模块化开发需要遵循规范</li>\n</ul>\n<h3 id=\"模块化解决的问题\"><a href=\"#模块化解决的问题\" class=\"headerlink\" title=\"模块化解决的问题\"></a>模块化解决的问题</h3><ol>\n<li>命名冲突</li>\n<li>文件依赖（加载文件）</li>\n<li>模块的复用</li>\n<li>统一规范和开发方式</li>\n</ol>\n<h3 id=\"JS实现模块化的规范\"><a href=\"#JS实现模块化的规范\" class=\"headerlink\" title=\"JS实现模块化的规范\"></a>JS实现模块化的规范</h3><p>AMD 的使用</p>\n<blockquote>\n<p>Asynchronous Module Definition：异步模块定义，浏览器端模块开发的规范 代表：require.js 特点：模块被异步加载，模块加载不影响后面语句的运行</p>\n</blockquote>\n<ol>\n<li><p>定义模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法:define(name, dependencies?, factory);</span><br><span class=\"line\">// name表示：当前模块的名称，是一个字符串 可有可无</span><br><span class=\"line\">// dependencies表示：当前模块的依赖项，是一个数组无论依赖一项还是多项 无则不写</span><br><span class=\"line\">// factory表示：当前模块要完成的一些功能，是一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义对象模块</span><br><span class=\"line\">define(&#123;&#125;)</span><br><span class=\"line\">// 定义方法模块</span><br><span class=\"line\">define(function() &#123;</span><br><span class=\"line\">  return &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 定义带有依赖项的模块</span><br><span class=\"line\">define([&apos;js/a&apos;], function() &#123;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加载模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// - 注意：require的第一个参数必须是数组</span><br><span class=\"line\"></span><br><span class=\"line\">// 参数必须是数组 表示模块路径 以当前文件为基准,通过回调函数中的参数获取加载模块中的变量 参数与模块按照顺序一一对应</span><br><span class=\"line\">require([&apos;a&apos;, &apos;js/b&apos;], function(a, b) &#123;</span><br><span class=\"line\">  // 使用模块a 和 模块b 中的代码</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路径查找配置</p>\n<ul>\n<li>requirejs 默认使用 baseUrl+paths 的路径解析方式</li>\n<li>可以使用以下方式避开此设置：1 以.js结尾 2 以 / 开始 3 包含协议：https:// 或 http://<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 配置示例</span><br><span class=\"line\">// 注意配置应当在使用之前</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos; // 配置基础路径为：当前目录下的js目录</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">require([&apos;a&apos;])    // 查找 基础路径下的 ./js/a.js</span><br><span class=\"line\"></span><br><span class=\"line\">// 简化加载模块路径</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos;,</span><br><span class=\"line\">  // 配置一次即可，直接通过路径名称（template || jquery）加载模块</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    template: &apos;assets/artTemplate/template-native&apos;,</span><br><span class=\"line\">    jquery: &apos;assets/jquery/jquery.min&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 加载jquery template模块</span><br><span class=\"line\">require([&apos;jquery&apos;, &apos;template&apos;])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>非模块化和依赖项支持</p>\n<ul>\n<li>添加模块的依赖模块，保证加载顺序（deps）</li>\n<li>将非模块化模块，转化为模块化（exports）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  baseUrl: &apos;./js&apos;,</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    // 配置路径</span><br><span class=\"line\">    noModule: &apos;assets/demo/noModule&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 配置不符合规范的模块项</span><br><span class=\"line\">  shim: &#123;</span><br><span class=\"line\">    // 模块名称</span><br><span class=\"line\">    noModule: &#123;</span><br><span class=\"line\">      deps: [],         // 依赖项</span><br><span class=\"line\">      exports: &apos;sayHi&apos;  // 导出模块中存在的函数或变量</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 注意点  如果定义模块的时候，指定了模块名称，需要使用该名称来引用模块</span><br><span class=\"line\">// 定义 这个模块名称与paths中的名称相同</span><br><span class=\"line\">define(&apos;moduleA&apos;, function() &#123;&#125;)</span><br><span class=\"line\">// 导入</span><br><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    // 此处的模块名：moduleA</span><br><span class=\"line\">    moduleA: &apos;assets/demo/moduleA&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>路径加载规则<br>路径配置的优先级：1 通过 config 配置规则查找 2 通过 data-main 指定的路径查找 3 以引入 requirejs 的页面所在路径为准查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- </span><br><span class=\"line\">  设置data-main属性</span><br><span class=\"line\">  1 data-main属性指定的文件也会同时被加载</span><br><span class=\"line\">  2 用于指定查找其他模块的基础路径</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwbncfb100009oqnkliwuzvj","category_id":"cjwbncfbb00049oqn0cg9e47n","_id":"cjwbncfbl000e9oqn2pdths4t"},{"post_id":"cjwbncfbi000c9oqnh3a9rqnk","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbs000l9oqnfy4bbcen"},{"post_id":"cjwbncfb700029oqn7p78xn5z","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbu000p9oqnqfs9jdry"},{"post_id":"cjwbncfbj000d9oqndq90a0lr","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbv000r9oqnaawq78qz"},{"post_id":"cjwbncfbp000i9oqn51ehisao","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbx000v9oqn3iux6s63"},{"post_id":"cjwbncfbd00069oqnp9kwf9wh","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbx000x9oqnagnxz8su"},{"post_id":"cjwbncfbr000k9oqnzngnw8nb","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfby000z9oqn83v9bi0n"},{"post_id":"cjwbncfbe00079oqndout3dyd","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfby00119oqn50rxay1s"},{"post_id":"cjwbncfbf00089oqnqx4rcns2","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfbz00129oqnfq1ggk7j"},{"post_id":"cjwbncfc600139oqnz7xxudqo","category_id":"cjwbncfbg00099oqn81rdd0qg","_id":"cjwbncfc700159oqnb5xz1ell"}],"PostTag":[{"post_id":"cjwbncfb100009oqnkliwuzvj","tag_id":"cjwbncfbc00059oqn4he6nwrt","_id":"cjwbncfbh000b9oqnh4tibf5b"},{"post_id":"cjwbncfbi000c9oqnh3a9rqnk","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbp000h9oqnvb8la6bc"},{"post_id":"cjwbncfb700029oqn7p78xn5z","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbr000j9oqn10n8g9k2"},{"post_id":"cjwbncfbj000d9oqndq90a0lr","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbu000o9oqny90zg7l5"},{"post_id":"cjwbncfbp000i9oqn51ehisao","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbv000q9oqnbgevgumt"},{"post_id":"cjwbncfbd00069oqnp9kwf9wh","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbw000u9oqn6fkpkzqw"},{"post_id":"cjwbncfbr000k9oqnzngnw8nb","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfbx000w9oqn7nx75hin"},{"post_id":"cjwbncfbe00079oqndout3dyd","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfby000y9oqnfp50ngmj"},{"post_id":"cjwbncfbf00089oqnqx4rcns2","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfby00109oqn782vr77c"},{"post_id":"cjwbncfc600139oqnz7xxudqo","tag_id":"cjwbncfbg000a9oqn2m4vcw8j","_id":"cjwbncfc700149oqnn7fomn8o"}],"Tag":[{"name":"杂记","_id":"cjwbncfbc00059oqn4he6nwrt"},{"name":"JS","_id":"cjwbncfbg000a9oqn2m4vcw8j"}]}}